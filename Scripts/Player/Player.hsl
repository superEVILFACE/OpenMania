// Enums
var Character_SONIC = 0;
var Character_TAILS = 1;
var Character_KNUCKLES = 2;
var Character_MIGHTY = 3;
var Character_RAY = 4;

var ShieldType_NONE = 0;
var ShieldType_INSTA = -1;
var ShieldType_BASIC = 1;
var ShieldType_FIRE = 2;
var ShieldType_ELECTRIC = 3;
var ShieldType_BUBBLE = 4;

var CollideSide_TOP = 1;
var CollideSide_RIGHT = 2;
var CollideSide_BOTTOM = 4;
var CollideSide_LEFT = 8;

var Mode_MANIA = 3;
var Mode_ENCORE = 5;

var SuperState_None = 0;
var SuperState_Transforming = 1;
var SuperState_Super = 2;
var SuperState_Deforming = 3;

var AIPlayer_Created = false;
class Player {
    // Create event
    event Create(flag) {
        this.Scene_Frame = Scene_Frame;

        if (flag == 0) {
            if (this.PropertyExists("filter") && !(this.PropertyGet("filter") & Mode_MANIA)) {
                this.Active = false;
                return;
            }

            // Load
            if (this.PropertyExists("characterID")) {
                var charID = this.PropertyGet("characterID");
                var selectedCharacter = global.SelectedCharacter & 0xFF;
                if (selectedCharacter == Character_MIGHTY || selectedCharacter == Character_RAY)
                    selectedCharacter = Character_SONIC;

                if (charID & (1 << selectedCharacter)) {
                    this.Character = global.SelectedCharacter & 0xFF;
                }
                else {
                    print "Character " + (1 << selectedCharacter) + " cannot spawn in this level with \"characterID\" flag " + charID + "!";
                    this.Active = false;
                    return;
                }
            }
            else {
                print "Missing \"characterID\" property!";
                this.Active = false;
                return;
            }
        }
        else {
            this.Character = flag >> 4;
        }

        if (this.X < 0.0 ||
            this.Y < 0.0 ||
            this.X >= Scene.GetWidth() * 16.0 ||
            this.Y >= Scene.GetHeight() * 16.0) {
            this.Active = false;
            return;
        }

        this.AutoPhysics = false;

        this.SensorABCD_Ground_cos = [ 9, 0, -9, 0 ];
        this.SensorABCD_Ground_sin = [ 0, -9, 0, 9 ];
        this.SensorABCD_Air_cos = [ 7, 0, -7, 0 ];
        this.SensorABCD_Air_sin = [ 0, -7, 0, 7 ];
        this.SensorEF_cos = [ 10, 0, -10, 0 ];
        this.SensorEF_sin = [ 0, -10, 0, 10 ];
        this.simple_cos = [ 1, 0, -1, 0 ];
        this.simple_sin = [ 0, 1, 0, -1 ];
        this.simple_side = [ CollideSide_TOP, CollideSide_LEFT, CollideSide_BOTTOM, CollideSide_RIGHT ];

        this.Priority = DrawGroup_FGLow_High;

        this.InputUp            = false;
        this.InputDown          = false;
        this.InputLeft          = false;
        this.InputRight         = false;
        this.InputAction        = false;
        this.InputJump          = false;
        this.InputJumpPressed   = false;
        this.InputPause         = false;

        // if (GLOBAL_Checkpoint >= 0) {
        //     this.X = GLOBAL_CheckpointSpawnX;
        //     this.Y = GLOBAL_CheckpointSpawnY;
        // }
        // if (GLOBAL_SpecialWarpSpawnX >= 0) {
        //     this.X = GLOBAL_SpecialWarpSpawnX;
        //     this.Y = GLOBAL_SpecialWarpSpawnY;
        //     // Prevent further use as spawn point
        //     GLOBAL_SpecialWarpSpawnX = -1.0;
        //     GLOBAL_SpecialWarpSpawnY = -1.0;
        // }

        this.SpeedsArray = [
            // TopSpeed, Acceleration, AirAcceleration, AirDeceleration,
            // Deceleration, RollFriction, JumpHeight, JumpReleaseSpeed
            [ 6.0, 0.046875, 0.09375, 0.0234375, 0.5, 0.0234375, 6.5, -4.0 ],
            [ 6.0, 0.046875, 0.09375, 0.0234375, 0.5, 0.0234375, 6.5, -4.0 ],
            [ 6.0, 0.046875, 0.09375, 0.0234375, 0.5, 0.0234375, 6.0, -4.0 ],
            [ 6.0, 0.046875, 0.09375, 0.0234375, 0.5, 0.0234375, 6.5, -4.0 ],
            [ 6.0, 0.046875, 0.09375, 0.0234375, 0.5, 0.0234375, 7.0, -4.0 ],
        ];

        this.SuperFormLock = false;

        this.sensorsAngle = [ 0, 0, 0 ];
        this.sensorsLength = [ 0.0, 0.0, 0.0 ];
        this.sensorsCollided = [ 0, 0, 0 ];

        this.ShowingTailSprite = false;
        this.DashDustSprite = Resources.LoadSprite("Sprites/Global/Dust.bin", SCOPE_SCENE);
        this.DashDustTimer = 0;
        // 0: Skidding
        // 1: Spindash
        // 2: Dropdash
        // Create instance of tail sprite with it's own animation
        this.TailObject = Instance.Create("TailObject", this.X, this.Y);

        this.Scale = 1.0;
        this.ImageTrail = Instance.Create("ImageTrail", this.X, this.Y);
        this.ImageTrail.Player = this;
        this.InvincibleStars = Instance.Create("InvincibleStars", this.X, this.Y);
        this.InvincibleStars.Player = this;

        this.FlipRevolutionsRemaining = 0;
        this.DoSpriteRotation = false;
        this.BadnikHitChain = 0;

        this.WalkThresholdBase = 4.0;
        this.RunThresholdBase = 6.0;
        this.DashThresholdBase = 12.0;

        ////////////
        this.Angle = 0;
        this.Rotation = 0.0;
        this.GroundSpeed = 0.0;
        this.UseGroundSpeed = true;
        this.Ground = true;
        this.Flip = false;
        // this.Priority
        this.Visible = true;
        this.PlaneIndex = 0;
        this.AngleMode = 0;
        this.Status = this.Player_StatusStanding;
        //
        this.LateUpdateGroundStatus = null;
        this.LateUpdateAirStatus = null;
        this.CameraPtr = null;
        // this.MainPlayerAnimation
        this.WalkThreshold = this.WalkThresholdBase;
        this.RunThreshold = this.RunThresholdBase;
        this.DashThreshold = this.DashThresholdBase;
        this.Unk_0xA4 = false;
        this.TailRotation = 0.0;
        this.TailFlip = false;
        this.AnimationAfterSpring = 0;
        this.PlayerID = 0;
        this.DefaultH = 20.0;
        this.HitboxHalfW = 10.0;
        this.HitboxHalfH = this.DefaultH;
        this.Rings = 0;
        this.RingExtraLifeLevel = 100;
        this.Shield = ShieldType_NONE;
        this.Lives = global.CurrentLives;
        this.Score = global.CurrentScore;
        this.ScoreToNextLife = 50000;
        this.CombineRing = false;
        this.WaitTimer = 0;
        this.OuttaHereTimer = 0;
        this.SpindashRev = 0.0;
        this.SpindashPitch = 0.0;
        this.RayGlideTurnValue = 0.25;
        this.UnderwaterAirTimer = 0;
        this.Invincibility = false;
        this.SpeedShoesTimer = 0;
        this.InvincibilityTimer = 0;
        this.CameraLockTimer = 0;
        this.SkidTimer = 0;
        this.PushingTimer = 0;
        this.Underwater = false;
        this.LastWaterBlock = null;
        this.OnGroundCopy = false;
        this.IsUpsideDown = false;
        this.UseChibiSprite = false;
        this.IsTransforming = false;
        this.SuperForm = 0;
        this.SuperForm_RingDrainTimer = 0;
        this.SuperForm_PulseValue = 0;
        this.SuperForm_PulseFlag = 0;
        this.IsSubPlayer = false;
        this.EnemyCombo = 0;
        this.RollHitboxDelta = 0.0;
        this.HorizontalCollisionFlag = 0;
        this.VerticalCollisionFlag = 0;
        this.TopSpeed         = 6.0;
        this.Acceleration     = 0.046875;
    	this.Friction         = 0.046875;
    	this.AirAcceleration  = 0.09375;
        this.Unk_0x158 = 0.0234375;
        this.Slope            = 0.125;
    	this.SlopeRollUp      = 0.078125;
    	this.SlopeRollDown    = 0.3125;
    	this.Deceleration     = 0.5;
        this.RollFriction     = 0.0234375;
        this.RollDeceleration = 0.125;
        this.GravityRate      = 0.21875;
        this.JumpHeight       = 6.5;
        this.JumpReleaseSpeed = -4.0;
        this.GroundSensorMask = 0;
        this.SensorRightX = 10.0;
        this.SensorRightShortX = 5.0;
        this.SensorMiddleX = 0.0;
        this.SensorLeftShortX = -5.0;
        this.SensorLeftX = -10.0;
        // this.HitboxHalfHCopy
        this.MoveLayer_OffsetX = 0.0;
        this.MoveLayer_OffsetY = 0.0;
        this.MoveLayer_Index = Scene.GetLayerIndex("Move"); // CUSTOM
        this.Unk_0x19C = 0;
        this.InputStatus = this.Player_InputStatus_Human;
        this.ControllerID = 1;
        this.InputLock = 0;
        //
        this.JumpAbility = 0;
        this.MidAirFlag = 0;
        this.JumpMovesetFunc = null;
        this.GroundedUpFunc = null;
        this.TailsGrabTimer = 0;
        this.Unk_0x1D8 = 0;
        this.Unk_0x1DC = 0;
        this.HangingFromTailsX = 0;
        this.HangingFromTailsY = 0;
        this.KillFlag = false;
        this.WentOffscreen = 0;
        this.IsGhost = false;
        this.MaxGlideSpeed = 0;
        this.Unk_0x1F8 = 0;
        this.Unk_0x1FC = 0;
        this.Unk_0x200 = 0;
        this.Unk_0x204 = 0;
        this.Unk_0x208 = 0;
        this.Unk_0x20C = 0;
        this.Unk_0x210 = 0;
        this.RespawnDestinationEntityX = 0.0;
        this.RespawnDestinationEntityY = 0.0;
        this.Unk_0x218 = 0;
        this.Unk_0x21C = 0;
        this.Unk_0x220 = 0;
        this.Unk_0x224 = 0;
        this.Unk_0x228 = 0;
        this.Unk_0x22C = 0;
        this.Unk_0x230 = 0;
        this.Unk_0x234 = 0;

        this.HurtReboundTimer = 0;
        this.InvulnTimer = 0;
        this.InstashieldTimer = 0;

        this.TimerFrames = 0;
        this.StopTimer = false;

        this.DoubleJumpFlag = 0;
        this.KnucklesGlideFlag = 0;
        this.KnucklesGlideState = 0;
        this.KnucklesGlideAngle = 0;
        this.KnucklesGlideAngleDirection = 0;
        this.RayBoostCount = 0x100;
        this.RayGlideSpeedStore = 0;
        // Custom: Uses this variable, instead of Rotation
        this.RayFacingUp = false;

        this.ShieldObject = Instance.Create("ShieldObject", this.X, this.Y);
        this.ShieldObject.Player = this;
        // this.GiveShield(ShieldType_BUBBLE, false);

        this.LevelWidth = Scene.GetWidth() * 16.0;
        this.LevelHeight = Scene.GetHeight() * 16.0;

        this.CameraShakeTimer = 0;
        this.CameraMinX = 0.0;
        this.CameraMinY = 0.0;
        this.CameraMaxX = this.LevelWidth - View.GetWidth(0);
        this.CameraMaxY = this.LevelHeight - View.GetHeight(0);

        if (global.RecallEntities) {
            var index = 0;
            this.X = global.RecallPosX[index];
            this.Y = global.RecallPosY[index];
            this.FlipFlag = this.Flip = global.RecallFlipFlag[index];
            this.Lives = global.RecallLives[index];

            this.TimerFrames = global.RecallTimer;
            this.Score = global.RecallScore;
            this.ScoreToNextLife = global.RecallScore1UP;
            this.Rings = global.RecallRings;
            this.RingExtraLifeLevel = global.RecallRingExtraLifeLevel;
            this.Shield = global.RecallShield & 0x3F;
            this.CombineRing = global.RecallShield >> 6;

            global.RecallEntities = false;
        }

        this.TracedInputUp =
        this.TracedInputDown =
        this.TracedInputLeft =
        this.TracedInputRight =
        this.TracedInputJump =
        this.TracedInputJumpPressed = 0;
        this.TracedPositionsX = Array.Create(16);
        this.TracedPositionsY = Array.Create(16);
        for (var i = 0; i < 16; i++)
            this.TracedPositionsX[i] = this.TracedPositionsY[i] = 0.0;
        this.TraceWriteIndex =
        this.TraceReadIndex = 0;
        this.TracePushTimer = 0;
        this.TraceTargetPositionX =
        this.TraceTargetPositionY = 0.0;
        this.OffscreenTimer = 0;

        this.RingSoundFlipFlag = false;

        this.LoadSounds();
        this.MoveCameraImmediately();
        this.LoadCharacterSprites();
        this.Player_ResetSpeeds();

        if (this.PropertyExists("Layer"))
            this.PlaneIndex = this.PropertyGet("Layer");

        this.Zone = null;
        if (Instance.GetCount("Zone") == 0)
            this.Zone = Instance.Create("Zone", 0.0, 0.0);
        else
            this.Zone = Instance.GetNth("Zone", 0);


        // DEBUG: Debug stuff // global.GameMode == 0
        if (!Device.IsMobile() && true) {
            if (String.Contains(Scene.GetName(), "GHZ/Scene1.bin")) {
                // this.X = 0x3CE9;
                // this.Y = 0x05FC;
                // this.X = 0x2740;
                // this.Y = 0x04BA;
                // this.X = 0x0E24;
                // this.Y = 0x068E;
            }
            if (String.Contains(Scene.GetName(), "GHZ/Scene2.bin")) {
                // this.X = 0x1832;
                // this.Y = 0x360;
            }
            if (String.Contains(Scene.GetName(), "CPZ/Scene1.bin")) {
                // this.X = 5476.0;
                // this.Y = 1904.0;
                // this.X = 0x2840;
                // this.Y = 0x05AC;
            }
            if (String.Contains(Scene.GetName(), "CPZ/Scene2.bin")) {
                // this.X = 0xD89;
                // this.Y = 0x1530;
            }
            if (String.Contains(Scene.GetName(), "SPZ1")) {
                // this.X = 14784.0;
                // this.Y = 840.0;
            }
            if (String.Contains(Scene.GetName(), "FBZ/Scene1.bin")) {
                // this.X = 0x2FB0;
                // this.Y = 0x0860;
                // this.X = 620.0;
                // this.Y = 1380.0;
            }
            if (String.Contains(Scene.GetName(), "FBZ/Scene2.bin")) {
                // this.X = 0x4F4;
                // this.Y = 0x770;
            }
            if (String.Contains(Scene.GetName(), "OOZ2")) {
                // this.X = 1406.0;
                // this.Y = 879.0;
            }
            if (String.Contains(Scene.GetName(), "HCZ/Scene1.bin")) {
                // this.X = 11916.0;
                // this.Y = 556.0;
            }
            if (String.Contains(Scene.GetName(), "HCZ/Scene2.bin")) {
                // this.X = 11803.0;
                // this.Y = 1775.0;
            }
            if (String.Contains(Scene.GetName(), "SSZ1")) {
                // this.X = 0xBF8;
                // this.Y = 0x520;
            }
            if (String.Contains(Scene.GetName(), "SSZ2")) {
                // this.X = 12204.0;
                // this.Y = 584.0;
            }
            if (String.Contains(Scene.GetName(), "MSZ/Scene1K.bin")) {
                // this.X = 6900.0;
                // this.Y = 2724.0;
            }
            if (String.Contains(Scene.GetName(), "MSZ/Scene2.bin")) {
                // this.X = 3500.0;
                // this.Y = 1504.0;
                // this.X = 11901.0;
                // this.Y = 954.0;
                // this.X = 12160.0;
                // this.Y = 128.0;
                // this.X = 0x18A8;
                // this.Y = 0x0610;
            }
            if (String.Contains(Scene.GetName(), "LRZ1")) {
                // this.X = 0x26F0;
                // this.Y = 0x284;
                // this.X = 0x1EE7;
                // this.Y = 0x383;
                // this.X = 0x22B0;
                // this.Y = 0x56C;
                // this.X = 0x3770;
                // this.Y = 0x3A0;
                // this.X = 0x3030;
                // this.Y = 0x0480;
                // this.X = 19202;
                // this.Y = 2759;
                // this.X = 0x2F00;
                // this.Y = 0x5E0;
                // this.X = 0x2C95;
                // this.Y = 0x71C;
                // this.X = 0x4660;
                // this.Y = 0x1F8;
                // this.X = 5749.0;
                // this.Y = 1385.0;
                // this.X = 8896.0;
                // this.Y = 1384.0;
            }
            if (String.Contains(Scene.GetName(), "LRZ2")) {
                // this.X = 0x21B6;
                // this.Y = 0x43A;
                // this.X = 0x2700;
                // this.Y = 0x288;
            }
            if (String.Contains(Scene.GetName(), "PSZ1")) {
                // this.X = 0x15C0;
                // this.Y = 0x1E0;
            }
            if (String.Contains(Scene.GetName(), "PSZ2")) {
                // this.X = 0x9C0;
                // this.Y = 0x58C;
            }
            if (String.Contains(Scene.GetName(), "TMZ1/Scene1.bin")) {
                // this.X = 0xB20;
                // this.Y = 0x9CC;
                // this.X = 486;
                // this.Y = 160;

                // MoveLayer_
            }
            if (String.Contains(Scene.GetName(), "TMZ2/Scene1.bin")) {
                // this.X = 0x773;
                // this.Y = 0x1F90;
            }

            // this.SuperForm = 2;
            // this.Player_ResetSpeeds();
        }

        // if (!AIPlayer_Created) {
        //     AIPlayer_Created = true;
        //     var aiplr = Instance.Create("Player", this.X, this.Y, Character_TAILS << 4);
        // }
        // else {
        //     this.SetAsAIPlayer(this.Character);
        //     AIPlayer_Created = false;
        // }
    }
    event LoadSounds() {
        this.SFX_Hurt = Resources.LoadSound("SoundFX/Global/Hurt.wav", SCOPE_GAME);
        this.SFX_Jump = Resources.LoadSound("SoundFX/Global/Jump.wav", SCOPE_GAME);
        this.SFX_Life = Resources.LoadSound("Music/1up.ogg", SCOPE_GAME); // Music/1up.ogg
        this.SFX_Roll = Resources.LoadSound("SoundFX/Global/Roll.wav", SCOPE_GAME);
        this.SFX_Grab = Resources.LoadSound("SoundFX/Global/Grab.wav", SCOPE_GAME);
        this.SFX_Skid = Resources.LoadSound("SoundFX/Global/Skidding.wav", SCOPE_GAME);
        this.SFX_Death = Resources.LoadSound("SoundFX/Global/Hurt.wav", SCOPE_GAME);
        this.SFX_Drown = Resources.LoadSound("SoundFX/Stage/Drown.wav", SCOPE_GAME);
        this.SFX_Spike = Resources.LoadSound("SoundFX/Global/Spike.wav", SCOPE_GAME);
        this.SFX_Flying = Resources.LoadSound("SoundFX/Global/Flying.wav", SCOPE_GAME);
        this.SFX_FlyingFall = Resources.LoadSound("SoundFX/Global/Tired.wav", SCOPE_GAME);
        this.SFX_GlideGrab = Resources.LoadSound("SoundFX/Global/Grab.wav", SCOPE_GAME);
        this.SFX_GlideLand = Resources.LoadSound("SoundFX/Global/Land.wav", SCOPE_GAME);
        this.SFX_GlideSlide = Resources.LoadSound("SoundFX/Global/Slide.wav", SCOPE_GAME);
        this.SFX_Transform2 = Resources.LoadSound("SoundFX/Stage/Transform2.wav", SCOPE_GAME);
        this.SFX_SpinCharge = Resources.LoadSound("SoundFX/Global/Charge.wav", SCOPE_GAME);
        this.SFX_SpinRelease = Resources.LoadSound("SoundFX/Global/Release.wav", SCOPE_GAME);
        this.SFX_PeelRelease = Resources.LoadSound("SoundFX/Global/PeelRelease.wav", SCOPE_GAME);

        this.SFX_ShieldAction_Fire = Resources.LoadSound("SoundFX/Global/FireDash.wav", SCOPE_GAME);
        this.SFX_ShieldAction_Electric = Resources.LoadSound("SoundFX/Global/LightningJump.wav", SCOPE_GAME);
        this.SFX_ShieldAction_Bubble = Resources.LoadSound("SoundFX/Global/BubbleBounce.wav", SCOPE_GAME);
        this.SFX_ShieldAction_Insta = Resources.LoadSound("SoundFX/Global/InstaShield.wav", SCOPE_GAME);

        this.SFX_ShieldObtain_Basic = Resources.LoadSound("SoundFX/Global/BlueShield.wav", SCOPE_GAME);
        this.SFX_ShieldObtain_Fire = Resources.LoadSound("SoundFX/Global/FireShield.wav", SCOPE_GAME);
        this.SFX_ShieldObtain_Electric = Resources.LoadSound("SoundFX/Global/LightningShield.wav", SCOPE_GAME);
        this.SFX_ShieldObtain_Bubble = Resources.LoadSound("SoundFX/Global/BubbleShield.wav", SCOPE_GAME);

        this.SFX_WaterWarning = Resources.LoadSound("SoundFX/Stage/Warning.wav", SCOPE_GAME);
        this.SFX_WaterSplash = Resources.LoadSound("SoundFX/Stage/Splash.wav", SCOPE_GAME);
        this.SFX_BubbleGet = Resources.LoadSound("SoundFX/Stage/Breathe.wav", SCOPE_GAME);

        this.SFX_Impact3 = Resources.LoadSound("SoundFX/Stage/Impact3.wav", SCOPE_GAME);

        this.SFX_BadnikDestroy = Resources.LoadSound("SoundFX/Global/Destroy.wav", SCOPE_GAME);
        this.SFX_Destroy = Resources.LoadSound("SoundFX/Global/Destroy.wav", SCOPE_GAME);
        this.SFX_BossHit = Resources.LoadSound("SoundFX/Stage/BossHit.wav", SCOPE_GAME);

        this.SFX_Spring = Resources.LoadSound("SoundFX/Global/Spring.wav", SCOPE_GAME);
        this.SFX_Checkpoint = Resources.LoadSound("SoundFX/Global/StarPost.wav", SCOPE_GAME);
        this.SFX_SpecialRing = Resources.LoadSound("SoundFX/Global/SpecialRing.wav", SCOPE_GAME);
        this.SFX_SpecialWarp = Resources.LoadSound("SoundFX/Global/SpecialWarp.wav", SCOPE_GAME);

        this.SFX_DropDash = Resources.LoadSound("SoundFX/Global/DropDash.wav", SCOPE_GAME);

        this.SFX_RayDive = Resources.LoadSound("SoundFX/Global/RayDive.wav", SCOPE_GAME);
        this.SFX_RaySwoop = Resources.LoadSound("SoundFX/Global/RaySwoop.wav", SCOPE_GAME);

        this.SFX_MightyDeflect = Resources.LoadSound("SoundFX/Global/MightyDeflect.wav", SCOPE_GAME);
        this.SFX_MightyUnspin = Resources.LoadSound("SoundFX/Global/MightyUnspin.wav", SCOPE_GAME);
        this.SFX_MightyDrill = Resources.LoadSound("SoundFX/Global/MightyDrill.wav", SCOPE_GAME);
        this.SFX_MightyLand = Resources.LoadSound("SoundFX/Global/MightyLand.wav", SCOPE_GAME);
        this.SFX_PimPom = Resources.LoadSound("SoundFX/Stage/PimPom.wav", SCOPE_GAME);

        this.SFX_RingLeft = Resources.LoadSound("SoundFX/Global/Ring.wav", SCOPE_GAME);
        this.SFX_RingRight = Resources.LoadSound("SoundFX/Global/Ring.wav", SCOPE_GAME);
        this.SFX_RingSpill = Resources.LoadSound("SoundFX/Global/LoseRings.wav", SCOPE_GAME);
        this.SFX_HyperRing = Resources.LoadSound("SoundFX/Global/HyperRing.wav", SCOPE_GAME);


        this.BGM_1up = Resources.LoadMusic("Music/1up.ogg", SCOPE_SCENE);
        this.BGM_Drowning = Resources.LoadMusic("Music/Drowning.ogg", SCOPE_SCENE);
        this.BGM_Sneakers = Resources.LoadMusic("Music/Sneakers.ogg", SCOPE_SCENE);
        this.BGM_Invincible = Resources.LoadMusic("Music/Invincible.ogg", SCOPE_SCENE);
    }
    event StopAllSounds() {
        for (var i = this.SFX_Hurt; i <= this.SFX_RingSpill; i++) {
            Sound.Stop(i);
        }
    }
    event LoadCharacterSprites() {
        var lastDefaultH = this.DefaultH;

        switch (this.Character) {
            case 0: // Character_SONIC
                this.Sprite = Resources.LoadSprite("Sprites/Players/Sonic.bin", SCOPE_SCENE);
                if (this.SuperForm)
                    this.Sprite = Resources.LoadSprite("Sprites/Players/SuperSonic.bin", SCOPE_SCENE);

                this.DefaultH = 20.0;
                this.RollHitboxDelta = 5.0;
                this.JumpMovesetFunc = this.Player_MovesetSonic;
                break;
            case 1: // Character_TAILS
                this.Sprite = Resources.LoadSprite("Sprites/Players/Tails.bin", SCOPE_SCENE);

                this.DefaultH = 16.0;
                this.RollHitboxDelta = 0.0;
                this.JumpMovesetFunc = this.Player_MovesetTails;
                break;
            case 2: // Character_KNUCKLES
                this.Sprite = Resources.LoadSprite("Sprites/Players/Knux.bin", SCOPE_SCENE);

                this.DefaultH = 20.0;
                this.RollHitboxDelta = 5.0;
                this.JumpMovesetFunc = this.Player_MovesetKnuckles;
                break;
            case 3: // Character_MIGHTY
                this.Sprite = Resources.LoadSprite("Sprites/Players/Mighty.bin", SCOPE_SCENE);

                this.DefaultH = 20.0;
                this.RollHitboxDelta = 5.0;
                this.JumpMovesetFunc = this.Player_MovesetMighty;
                break;
            case 4: // Character_RAY
                this.Sprite = Resources.LoadSprite("Sprites/Players/Ray.bin", SCOPE_SCENE);

                this.DefaultH = 20.0;
                this.RollHitboxDelta = 5.0;
                this.JumpMovesetFunc = this.Player_MovesetRay;
                break;
        }

        this.Y -= this.DefaultH - lastDefaultH;
        this.HitboxHalfH = this.DefaultH;

        this.SensorRightX = 10.0;
        this.SensorRightShortX = 5.0;
        this.SensorMiddleX = 0.0;
        this.SensorLeftShortX = -5.0;
        this.SensorLeftX = -10.0;

        var playerStatus = this.Status;
        if (playerStatus == this.Player_StatusKnuckles_Climbing ||
            playerStatus == this.Player_StatusMighty_HammerDrop ||
            playerStatus == this.Player_StatusSonic_DropDash ||
            playerStatus == this.Player_StatusTails_Flying ||
            playerStatus == this.Player_StatusKnuckles_Falling ||
            playerStatus == this.Player_StatusKnuckles_GlidingLeft ||
            playerStatus == this.Player_StatusKnuckles_GlidingRight ||
            playerStatus == this.Player_StatusKnuckles_Sliding ||
            playerStatus == this.Player_StatusKnuckles_GettingUp ||
            playerStatus == this.Player_StatusRay_Flying ||
            playerStatus == this.Player_StatusMighty_UnspinInvincible) {
            this.Status = this.Player_StatusJumping;
            this.ResetAnimation(10, 0);
        }
        else {
            if (this.CurrentAnimation > -1)
                this.ResetAnimation(this.CurrentAnimation, this.CurrentFrame);
        }

        if (this.SuperForm) {
            // Handle palette stuff
        }
        this.Player_ResetSpeeds();
    }
    event SetAsAIPlayer(char) {
        this.Character = char;
        this.LoadCharacterSprites();
        this.Player_ResetSpeeds();
        this.InputStatus = this.Player_InputStatus_AI;
        this.IsSubPlayer = true;
        this.Priority -= 1;
    }

    // Update events
    event Player_InputStatus_Human() {
        this.InputUp            = Input.ActionExists("Up") ? Input.IsActionHeld(this.PlayerID, "Up") : false;
        this.InputDown          = Input.ActionExists("Down") ? Input.IsActionHeld(this.PlayerID, "Down") : false;
        this.InputLeft          = Input.ActionExists("Left") ? Input.IsActionHeld(this.PlayerID, "Left") : false;
        this.InputRight         = Input.ActionExists("Right") ? Input.IsActionHeld(this.PlayerID, "Right") : false;
        this.InputJump          = Input.ActionExists("A") ? Input.IsActionHeld(this.PlayerID, "A") : false;
        this.InputJump |= Input.ActionExists("B") ? Input.IsActionHeld(this.PlayerID, "B") : false;
        this.InputJump |= Input.ActionExists("C") ? Input.IsActionHeld(this.PlayerID, "C") : false;
        this.InputJumpPressed   = Input.ActionExists("A") ? Input.IsActionPressed(this.PlayerID, "A") : false;
        this.InputJumpPressed |= Input.ActionExists("B") ? Input.IsActionPressed(this.PlayerID, "B") : false;
        this.InputJumpPressed |= Input.ActionExists("C") ? Input.IsActionPressed(this.PlayerID, "C") : false;

        /*if (Input.ActionExists("X") ? Input.IsActionPressed(this.PlayerID, "X") : false) {
            if (global.GameMode == GameModes_TimeAttack) {
                global.SuppressTitlecard = true;
                Scene.Restart();
            }
            else if (this.SuperForm == SuperState_None && !this.Ground) {
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(47, 0);
                this.WaitTimer = 0;
                this.IsTransforming = true;
                this.SuperForm = SuperState_Transforming;
                this.XSpeed = this.YSpeed = 0.0;
            }
        }*/

        if (DebugMode.Active && Input.ActionExists("Y") ? Input.IsActionPressed(this.PlayerID, "Y") : false) {
            this.Character = (this.Character + 1) % 5;
            this.ResetAnimation(this.CurrentAnimation, 0);
            this.LoadCharacterSprites();
        }
        
        // Touchscreen Controls
        if (Device.IsMobile()) {
            var vh = View.GetHeight(0);
            var vw = View.GetWidth(7) * vh / View.GetHeight(7);
            var vsw = vw / Window.GetWidth();
            var vsh = vh / Window.GetHeight();
            var tx, ty, tD, tP, dist, angl;
            var buttonY = vh - 64.0;
            for (var t = 0; t < 2; t++) {
                tx = Touch.GetX(t) * vsw;
                ty = Touch.GetY(t) * vsh;
                tD = Touch.IsDown(t);
                tP = Touch.IsPressed(t);

                dist = Math.Distance(64.0, buttonY, tx, ty);
                angl = Math.Direction(64.0, buttonY, tx, ty);
                if (dist < 128.0 && tD) {
                    angl = this.GetAngleMode(Number.AsInteger(this.RadiansToHex(angl)));
                    if (angl == 0x00)
                        this.InputRight = true;
                    else if (angl == 0x40)
                        this.InputUp = true;
                    else if (angl == 0x80)
                        this.InputLeft = true;
                    else if (angl == 0xC0)
                        this.InputDown = true;
                }

                dist = Math.Distance(vw - 64.0, buttonY, tx, ty);
                if (dist < 64.0) {
                    this.InputJump         |= tD;
                    this.InputJumpPressed  |= tP;
                }

                dist = Math.Distance(64.0, 64.0, tx, ty);
                if (dist < 48.0 && global.GameMode == GameModes_TimeAttack && tP) {
                    global.SuppressTitlecard = true;
                    Scene.Restart();
                }

                if (global.CanPause) {
                    dist = Math.Distance(vw - 64.0, 24.0, tx, ty);
                    if (dist < 48.0 && tP) {
                        if (pauseMan)
                            pauseMan.StartPause();
                    }
                }
            }
        }
    }
    
    event Player_InputStatus_AI() {
        var mainPlayer = null, aiPlayer = this;
        with ("Player") {
            if (this != aiPlayer && !this.IsSubPlayer) {
                mainPlayer = this;
                break;
            }
        }
        if (!mainPlayer)
            return;

        this.Player_InputStatus_TracePlayerInputs();

        if (this.Status == this.Player_StatusTails_Flying &&
            mainPlayer.Status == mainPlayer.Player_StatusHangingFromTails) {
            this.InputUp = mainPlayer.InputUp;
            this.InputDown = mainPlayer.InputDown;
            this.InputLeft = mainPlayer.InputLeft;
            this.InputRight = mainPlayer.InputRight;
            this.InputJump = mainPlayer.InputJump;
            this.InputJumpPressed = mainPlayer.InputJumpPressed;
        }

        if (mainPlayer.Status != mainPlayer.Player_StatusHangingFromTails) {
            var targetX = this.TraceTargetPositionX;
            if (mainPlayer.Ground || mainPlayer.OnGroundCopy) {
                var mainPlayerGSP = mainPlayer.GroundSpeed;
                if (mainPlayerGSP > -2.0 && mainPlayerGSP < 2.0) {
                    if (mainPlayer.Flip)
                        targetX += 32.0;
                    else
                        targetX -= 32.0;
                }
            }

            var distanceX = targetX - this.X;
            if (distanceX) {
                if (distanceX >= 0.0) {
                    if (distanceX >= 48.0) {
                        this.InputLeft = false;
                        this.InputRight = true;
                    }
                    if (this.GroundSpeed && !this.Flip)
                        this.X += 0.75 * Static.HexCos(this.Angle);
                }
                else {
                    if (distanceX <= -48.0) {
                        this.InputLeft = true;
                        this.InputRight = false;
                    }
                    if (this.GroundSpeed && this.Flip)
                        this.X -= 0.75 * Static.HexCos(this.Angle);
                }
            }

            // Pushing
            var doJump = false;
            if (this.CurrentAnimation == 17) {
                this.TracePushTimer++;
                if (mainPlayer.Flip == this.Flip && mainPlayer.CurrentAnimation == 17)
                    this.TracePushTimer = 0;

                doJump = this.TracePushTimer < 30;
            }
            else {
                if (this.Y - this.TraceTargetPositionY <= 32.0) {
                    this.TracePushTimer = 0;

                    // LABEL_39:
                    if (this.InputLock > 0) {
                        if (Math.Abs(this.GroundSpeed) < 0.5)
                            this.InputStatus = this.Player_InputStatus_AI_NoGroundSpeed;
                    }
                    this.Player_AI_EndInputStatus();
                    return;
                }
                else {
                    mainPlayer.TracePushTimer++;
                    doJump = this.TracePushTimer < 64;
                }
            }

            if (doJump) {
                this.InputJump = true;
            }
            else {
                if (this.Ground) {
                    if (!this.InputJump)
                        this.InputJumpPressed = true;

                    this.InputJump = true;
                }
                this.JumpAbility = 0;
                this.TracePushTimer = 0;
            }

            if (this.InputLock > 0) {
                if (Math.Abs(this.GroundSpeed) < 0.5)
                    this.InputStatus = this.Player_InputStatus_AI_NoGroundSpeed;
            }
            this.Player_AI_EndInputStatus();
            return;
        }

        this.Player_AI_EndInputStatus();
        return;
    }
    event Player_InputStatus_AI_NoGroundSpeed() {
        this.InputUp = false;
        this.InputDown = false;
        this.InputLeft = false;
        this.InputRight = false;
        this.InputJump = false;
        this.InputJumpPressed = false;
        if (this.InputLock && this.Ground && this.GroundSpeed < 0.25) {
            this.GroundSpeed = 0.0;
            this.InputStatus = this.Player_InputStatus_AI_DoSpindash;
            this.TracePushTimer = 1;
            if (this.CurrentAnimation != 15) {
                this.InputDown = true;
                this.FlipFlag = this.Flip = this.X >= this.TraceTargetPositionX;
            }
        }

        this.Player_AI_EndInputStatus();
    }
    event Player_InputStatus_AI_DoSpindash() {
        if (this.TracePushTimer >= 64) {
            this.TracePushTimer = 0;
            this.InputDown = false;
            this.InputJumpPressed = false;
            this.InputStatus = this.Player_InputStatus_AI;
        }
        else {
            this.InputDown = true;
            this.InputJumpPressed = (this.TracePushTimer & 15) == 0;
            this.TracePushTimer++;
        }

        this.Player_AI_EndInputStatus();
    }
    event Player_InputStatus_TracePlayerInputs() {
        var mainPlayer = null, aiPlayer = this;
        with ("Player") {
            if (this != aiPlayer && !this.IsSubPlayer) {
                mainPlayer = this;
                break;
            }
        }
        if (!mainPlayer)
            return;

        this.TracedInputUp = ((this.TracedInputUp << 1) | mainPlayer.InputUp) & 0xFFFF;
        this.TracedInputDown = ((this.TracedInputDown << 1) | mainPlayer.InputDown) & 0xFFFF;
        this.TracedInputLeft = ((this.TracedInputLeft << 1) | mainPlayer.InputLeft) & 0xFFFF;
        this.TracedInputRight = ((this.TracedInputRight << 1) | mainPlayer.InputRight) & 0xFFFF;
        this.TracedInputJumpPressed = ((this.TracedInputJumpPressed << 1) | mainPlayer.InputJumpPressed) & 0xFFFF;
        this.TracedInputJump = ((this.TracedInputJump << 1) | mainPlayer.InputJump) & 0xFFFF;

        if (mainPlayer.Status == mainPlayer.Player_StatusHangingFromTails) {
            this.TracedInputDown <<= 15;
            this.TracedInputLeft <<= 15;
            this.TracedInputRight <<= 15;
            this.TracedInputJumpPressed <<= 15;
            this.TracedInputJump <<= 15;
        }

        this.InputUp = this.TracedInputUp >> 15;
        this.InputDown = this.TracedInputDown >> 15;
        this.InputLeft = this.TracedInputLeft >> 15;
        this.InputRight = this.TracedInputRight >> 15;
        this.InputJump = this.TracedInputJump >> 15;
        this.InputJumpPressed = this.TracedInputJumpPressed >> 15;

        var readIndex;
        var writeIndex = this.TraceWriteIndex;
        if (mainPlayer.Player_IsActiveStatus()) {
            this.TracedPositionsX[writeIndex] = mainPlayer.X;
            this.TracedPositionsY[writeIndex] = mainPlayer.Y;
            this.TraceWriteIndex = (writeIndex + 1) & 15;

            readIndex =
            this.TraceReadIndex = (this.TraceReadIndex + 1) & 15;
            if (!mainPlayer.Ground && mainPlayer.OnGroundCopy) {
                this.TraceTargetPositionX = mainPlayer.X;
                this.TraceTargetPositionY = mainPlayer.Y;
                return;
            }
        }
        else {
            readIndex = (writeIndex + 15) & 15; // (writeIndex + 16 - 1) % 16
        }

        this.TraceTargetPositionX = this.TracedPositionsX[readIndex];
        this.TraceTargetPositionY = this.TracedPositionsY[readIndex];
    }
    event AiCheckOffscreen() {
        var mainPlayer = null, aiPlayer = this;
        with ("Player") {
            if (this != aiPlayer && !this.IsSubPlayer) {
                mainPlayer = this;
                break;
            }
        }
        if (!mainPlayer)
            return;

        var vw = View.GetWidth(0) * 0.5;
        var vh = View.GetHeight(0) * 0.5;
        if (mainPlayer.Priority != 2 || this.Priority != 2) {
            var x = Math.Abs((View.GetX(0) + vw) - this.X);
            var y = Math.Abs((View.GetY(0) + vh) - this.Y);
            if (x >= vw + 96.0 || y >= vh + 96.0)
                this.OffscreenTimer++;
            else
                this.OffscreenTimer = 0;

            if (this.OffscreenTimer >= 240) {
                var player = this;

                player.OffscreenTimer = 0;
                player.Status = player.Player_StatusStartRespawn;
                player.WentOffscreen = true;
                // player.Position.X = -0x400000u;
                // player.Position.Y = -0x400000u;
                player.MaxGlideSpeed = 0;
                // player.SpriteTransformFlag &= 0xFBu;
                player.LateUpdateAirStatus = null;
                player.LateUpdateGroundStatus = null;
                player.InputStatus = player.Player_InputStatus_TracePlayerInputs;
                // player.SpriteSize.X = 512;
                // player.SpriteSize.Y = 512;
                player.XSpeed = 0.0;
                player.YSpeed = 0.0;
                player.GroundSpeed = 0.0;
                player.UseGroundSpeed = false;
                player.Interactable = false;
                player.InvincibilityTimer = 0;
                // player.VisibilityFlag = 1;
                if (mainPlayer.Underwater && mainPlayer.Y < global.CurrentWaterLevel) {
                    player.DrawGroup = mainPlayer.DrawGroup;
                    player.UnderwaterAirTimer = 0;
                }
                else {
                    player.DrawGroup = DrawGroup_AboveTiles;
                    player.UnderwaterAirTimer = 0;
                }
            }
        }
    }
    event Player_AI_EndInputStatus() {
        // if (Player_AiDoEncoreSwitch())
        //     aiPlayer->InputStatus = sub_334130;
        this.AiCheckOffscreen();
    }

    event CreateSkidDust() {
        if (Scene_Frame % 5 == 0) {
            var dust = Instance.Create("Dust", this.X, this.Y + this.HitboxH * 0.5 + this.HitboxOffY);
            dust.SetAnimation(0, 0);
            dust.Priority = this.Priority;
        }
    }
    event Player_SpawnMovingDust(xspeed) {
        var dust = Instance.Create("Dust", this.X, this.Y + this.HitboxH * 0.5 + this.HitboxOffY);
        dust.SetAnimation(0, 0);
        dust.Priority = this.Priority;
        dust.XSpeed = xspeed;
        dust.AutoPhysics = true;
    }

    event GiveShield(shield, doSound) {
        this.Shield = shield;

        if (this.Character == Character_SONIC) {
            this.InstashieldTimer = 0;
            this.DoubleJumpFlag = 0;
        }

        if (this.Shield == ShieldType_BASIC) {
            this.ShieldObject.SetAnimation(0, 0);
            if (doSound)
                Sound.Play(this.SFX_ShieldObtain_Basic);
        }
        else if (this.Shield == ShieldType_FIRE) {
            this.ShieldObject.SetAnimation(1, 0);
            if (doSound)
                Sound.Play(this.SFX_ShieldObtain_Fire);
        }
        else if (this.Shield == ShieldType_ELECTRIC) {
            this.ShieldObject.SetAnimation(3, 0);
            if (doSound)
                Sound.Play(this.SFX_ShieldObtain_Electric);
        }
        else if (this.Shield == ShieldType_BUBBLE) {
            this.ShieldObject.SetAnimation(5, 0);
            if (doSound)
                Sound.Play(this.SFX_ShieldObtain_Bubble);
        }
    }
    event GainRings(rings) {
        this.Rings += rings;
        if (this.Rings >= this.RingExtraLifeLevel) {
            this.GainLife();

            this.RingExtraLifeLevel += 100;
        }
    }
    event SpawnLostRings(rings, planeIndex) {
        var t = 0;
        var angle = 101.25 * Math_PI / 180.0;
        var n = false;
        var speed = 4.0;

        while (t < Math.Min(rings, 32)) {
            var ring = Instance.Create("Ring", this.X, this.Y);
            ring.RegatherTimer = 64;
            ring.DeathTimer = 256;
            ring.XSpeed =  Math.Cos(angle) * speed;
            ring.YSpeed = -Math.Sin(angle) * speed;
            ring.Bounceable = true;
            ring.Priority = this.Priority;
            ring.PlaneIndex = 0;
            ring.Status = ring.Ring_StatusBounceable;
            if (n) {
                ring.XSpeed *= -1.0;
                angle += 22.5 * Math_PI / 180.0;
            }
            n = !n;
            t++;
            if (t == 16) {
                speed = 2.0;
                angle = 101.25 * Math_PI / 180.0;
            }
        }
    }
    event SpawnLostCombineRings(rings, planeIndex) {
        var ringsToSpawn = rings >> 2;
        if (ringsToSpawn > 8)
            ringsToSpawn = 8;
        else if (ringsToSpawn < 1)
            ringsToSpawn = 1;

        var ringIndex = 0;
        var startAngle = 0xC0 - 0x10 * (ringsToSpawn & 0xFFFFFFFE);
        var ringsWorth = rings / ringsToSpawn;

        if (ringsToSpawn & 1)
            startAngle = startAngle + 0x10;
        else
            startAngle = startAngle - 0x10;

        while (ringIndex < ringsToSpawn) {
            var ring = Instance.Create("Ring", this.X, this.Y);
            ring.SetAnimation(1, 0);
            ring.Type = 1;

            ring.XSpeed = Static.HexCos(startAngle) * 3.0;
            ring.YSpeed = Static.HexSin(startAngle) * 3.0;

            // this.Opacity

            ring.AnimationSpeedMult = 384.0 / 64.0;
            ring.PlaneIndex = planeIndex;

            ring.HitboxW = ring.HitboxH = 32.0;
            ring.HitboxHalfW = ring.HitboxHalfH = 16.0;
            ring.RegatherTimer = 64;
            ring.DeathTimer = 256;
            ring.GravityRate = 0.0703125;

            ring.Bounceable = true;
            ring.Priority = this.Priority;
            ring.AngleSpeed = 0x180;
            ring.Angle = 0;

            ring.RingsToReward = ringsWorth;

            ring.Status = ring.Ring_StatusBounceableCombine;
            startAngle += 0x20;
            ringIndex++;
        }
    }
    event GetHurt(pain_x) {
        var doKnockback = false;
        var loseRings = false;

        if (this.IsSubPlayer) {
            doKnockback = true;
        }
        else {
            if (this.Shield != ShieldType_NONE) {
                this.Shield = ShieldType_NONE;
                doKnockback = true;
            }
            else if (this.Rings > 0) {
                doKnockback = true;
                loseRings = true;
            }
            else {
                this.KillFlag = 1;
                // 1: Normal death
                // 2: Soundless
                // 3: Drown death
                return;
            }
        }

        if (doKnockback) {
            this.Status = this.Player_StatusHurt;
            this.AnimationSpeedMult = 1.0;
            this.SetAnimation(18, 0);

            // Custom
            this.LateUpdateAirStatus = null;
            this.XSpeed = -2.0;
            if (this.X > pain_x)
                this.XSpeed = 2.0;

            this.YSpeed = -4.0;
            this.Ground = false;
            this.UseGroundSpeed = true;
            this.InvincibilityTimer = 120;
            if (this.Underwater) {
                this.XSpeed *= 0.5;
                this.YSpeed = -2.0;
            }
            if (loseRings)
                Sound.Play(this.SFX_RingSpill);
            else
                Sound.Play(this.SFX_Hurt);
        }
        if (loseRings) {
            if (this.CombineRing)
                this.SpawnLostCombineRings(this.Rings, this.PlaneIndex);
            else
                this.SpawnLostRings(this.Rings, this.PlaneIndex);
            this.CombineRing = false;
            this.Rings = 0;
            this.RingExtraLifeLevel = 100;
        }
    }
    event KillPlayer() {
        this.KillFlag = true;
        this.XSpeed = 0.0;
        if (!this.Underwater)
            this.YSpeed = -7.0;
        this.GroundSpeed = 0.0;
        this.Ground = false;
        this.InvulnTimer = 0;

        this.StopAllSounds();

        if (this.Underwater)
            Sound.Play(this.SFX_Drown);
        else
            Sound.Play(this.SFX_Death);
    }
    event GainLife() {
        this.Lives++;
        Music.Play(this.BGM_1up);
    }
    event GainScore(count) {
        this.Score += count;
        if (this.Score >= this.ScoreToNextLife) {
            this.GainLife();
            this.ScoreToNextLife += 50000;
        }

        if (this.Score > 9999999)
            this.Score = 9999999;
    }
    event LoseLife() {
        this.Lives--;
    }
    event DoVictory() {
        if (!this.Victory) {
            this.Victory = true;

            this.GroundSpeed = 0.0;
            this.XSpeed = 0.0;
            this.YSpeed = 0.0;
        }
    }
    event IncreaseEnemyCombo() {
        var score = 10;
        switch (this.EnemyCombo) {
            case 0:
                score = 100;
                break;
            case 1:
                score = 200;
                break;
            case 2:
                score = 500;
                break;
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                score = 1000;
                break;
            case 15:
                score = 10000;
                break;
        }
        this.GainScore(score);
        if (this.EnemyCombo < 15)
            this.EnemyCombo++;
    }
    event Player_HandleFinishDead() {
        if (this.IsSubPlayer) {
            return;
        }
        if (global.GameMode == GameModes_Encore) {
            return;
        }

        var lifeCount = this.Lives;
        if (lifeCount > 0 && global.GameMode != GameModes_TimeAttack)
            this.Lives = lifeCount - 1;

        global.CurrentLives = this.Lives;

        this.Player_SetFXFade_Dead();
    }
    event Player_SetFXFade_Dead() {
        this.Status = this.Player_StatusNone;

        var fxfade = Instance.GetNth("FXFade", 0);
        if (!fxfade)
            fxfade = Instance.Create("FXFade", 0.0, 0.0);

        fxfade.SpeedIn = 4;
        fxfade.Wait = 0;
        fxfade.Timer = 0;
        fxfade.SpeedOut = 10;
        // fxfade.Color = 0xFFFFFF;
        fxfade.Color = 0;
        if (global.CurrentLives == 0)
            fxfade.Status = this.Player_SetFXFade_Status_BackToMenu;
        else
            fxfade.Status = this.Player_SetFXFade_Status_Restart;
        fxfade.Priority = 15;
    }
    event Player_SetFXFade_Status_Restart() {
        this.Timer += this.SpeedOut;
        if (this.Timer > 1024) {
            if (true) {
                // global.EnableIntro = true;
                // global.SuppressAutoMusic = true;
                // global.SuppressTitlecard = true;
            }

            Scene.Restart();
        }
    }
    event Player_SetFXFade_Status_BackToMenu() {
        this.Timer += this.SpeedOut;
        if (this.Timer > 1024) {
            if (true) {
                // global.EnableIntro = true;
                // global.SuppressAutoMusic = true;
                // global.SuppressTitlecard = true;
            }

            Scene.Load("Stages/LSelect/Scene1.bin");
        }
    }

    event Player_CheckCanDamage(object) {
        var playerAnim = this.CurrentAnimation;

        var candamage = this.Invincibility != 0 || playerAnim == 10 || playerAnim == 15;

        var char = this.Character;
        if (char == Character_SONIC ||
            char == Character_MIGHTY) {
            candamage |= playerAnim == 16;
        }
        else if (char == Character_TAILS) {
            if (!candamage) {
                if (this.Y > object.Y)
                    candamage = playerAnim == 48 || playerAnim == 49 || playerAnim == 50;
            }
        }
        else if (char == Character_KNUCKLES) {
            candamage |= playerAnim == 48 || playerAnim == 51;
        }

        return candamage;
    }
    event Player_BreakableCollide(object) {
        if (this.Character == Character_MIGHTY && this.MidAirFlag > 1) {
            this.UpdateHitbox(0);
            if (this.UseChibiSprite)
                this.HitboxW = 64.0;
            else
                this.HitboxW = 96.0;
            this.HitboxOffY = 16.0;

            if (Static.Entity_CollideWithObject(object, this))
                return 1;
        }

        this.UpdateHitbox(0);
        return Static.Entity_CollideWithObject(object, this);
    }
    event Player_BreakEnemy(enemy, destroyEnemy) {
        if (this.Player_CheckCanDamage(enemy)) {
            var number = Number.AsInteger(Math.RandomRange(0, 32)) >> 4;

            // TODO: Finish this, let number randomly pick 1 of two Animal types, determined per zone.
            // example: GHZ would choose between Flicky and Pocky, LRZ would do Cucky or Tocky, etc.
            var animal = Instance.Create("Animals", enemy.X, enemy.Y, number + 1);

            var expl = Instance.Create("Explosion", enemy.X, enemy.Y);
            expl.SetAnimation(1, 0);
            expl.Priority = DrawGroup_FGHigh_High;
            Sound.Play(this.SFX_Destroy);

            var yspeed = this.YSpeed;
            if (yspeed <= 0.0)
                this.YSpeed = yspeed + 1.0;
            else if (this.Y >= enemy.Y || this.Character == Character_MIGHTY && this.CurrentAnimation == 16)
                this.YSpeed = yspeed - 1.0;
            else
                this.YSpeed = -(yspeed + 2.0 * this.GravityRate);

            // TODO: Finish this

            var score = Instance.Create("ScoreBonus", enemy.X, enemy.Y);
            score.ResetAnimation(0, this.EnemyCombo);
            score.Priority = DrawGroup_FGHigh_High;
            this.IncreaseEnemyCombo();

            if (destroyEnemy) {
                enemy.Active = false;
            }
            return true;
        }

        if (this.Character != Character_MIGHTY || this.CurrentAnimation != 4) {
            var playerStatus = this.Status;
            if (playerStatus != this.Player_StatusHurt &&
                playerStatus != this.Player_StatusDead &&
                playerStatus != this.Player_StatusDrown &&
                !this.Invincibility &&
                !this.InvincibilityTimer &&
                this.Unk_0x234 == 0) {
                this.GetHurt(enemy.X);
            }
            return false;
        }

        if (this.Unk_0x234 == 0) {
            Sound.Play(this.SFX_PimPom);
            this.Unk_0x234 = 30;
            if (enemy.X > this.X)
                this.GroundSpeed = -1.0;
            else
                this.GroundSpeed = 1.0;
            return false;
        }

        return false;
    }
    event Player_HitBoss(boss) {
        if (this.KillFlag)
            return false;

        if (this.Player_CheckCanDamage(boss)) {
            if (this.Status == this.Player_StatusKnuckles_GlidingLeft ||
                this.Status == this.Player_StatusKnuckles_GlidingRight) {
                this.Status = this.Player_StatusKnuckles_Falling;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(49, 0);
            }

            if (this.Status == this.Player_StatusMighty_HammerDrop) {
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(48, 0);
                Sound.Play(this.SFX_MightyUnspin);

                this.Ground = false;
                this.JumpAbility = 0;
                this.MidAirFlag = 0;

                this.Status = this.Player_StatusMighty_UnspinInvincible;
            }

            if (this.Ground) {
                this.GroundSpeed = -this.GroundSpeed;
            }
            else {
                this.XSpeed = -this.XSpeed;
                this.YSpeed = -this.YSpeed;
            }
            return true;
        }
        else {
            var playerStatus = this.Status;
            if (playerStatus != this.Player_StatusHurt &&
                playerStatus != this.Player_StatusDead &&
                playerStatus != this.Player_StatusDrown &&
                !this.Invincibility &&
                !this.InvincibilityTimer) {
                this.GetHurt(boss.X);
            }
        }
        return false;
    }
    event Player_EnemyDeflectOrHurtPlayer(enemy) {
        var doMightyDeflect = false;
        if (this.Character == Character_MIGHTY) {
            var anim = this.CurrentAnimation;
            if (anim == 4 || anim == 10 || anim == 15 || anim == 16)
                doMightyDeflect = true;
        }
        var doShieldDeflect =
            this.Shield == ShieldType_FIRE ||
            this.Shield == ShieldType_BUBBLE ||
            this.Shield == ShieldType_ELECTRIC;

        if (doMightyDeflect || doShieldDeflect) {
            if (doMightyDeflect && !doShieldDeflect)
                Sound.Play(this.SFX_MightyDeflect);

            var angle = Math.Atan(this.X - enemy.X, this.Y - enemy.Y);
            enemy.XSpeed = -8.0 * Math.Cos(angle);
            enemy.YSpeed = -8.0 * Math.Sin(angle);
            enemy.Interactable = false;
            return true;
        }

        var playerStatus = this.Status;
        if (playerStatus != this.Player_StatusHurt &&
            playerStatus != this.Player_StatusDead &&
            playerStatus != this.Player_StatusDrown &&
            !this.Invincibility &&
            !this.InvincibilityTimer) {
            this.GetHurt(enemy.X);
        }
        return false;
    }
    event Player_IsActiveStatus() {
        // TODO:
        if (this.Active && !this.KillFlag) {
            if (this.Status != this.Player_StatusStartFlyingIn ||
                this.Status != this.Player_StatusDead ||
                this.Status != this.Player_StatusDrown ||
                this.Status != this.Player_StatusStartRespawn ||
                this.Status != this.Player_StatusFlyingIn ||
                this.Status != this.Player_StatusJumpingIn ||
                this.Status != this.Player_StatusTransforming)
                return true;
        }
        return false;
    }
    event Player_IsHurtable() {
        var status = this.Status;
        if (status != this.Player_StatusHurt &&
            status != this.Player_StatusDead &&
            status != this.Player_StatusDrown &&
            !this.Invincibility &&
            this.InvincibilityTimer <= 0) {
            return true;
        }
        return false;
    }
    event Player_AttemptHurtPlayer(entity) {
        if (this.Player_IsHurtable()) {
            this.GetHurt(entity.X);
            return true;
        }
        return false;
    }

    // Camera movement function
    event MoveCameraImmediately() {
        if (this.IsSubPlayer != 1)
            return;

        var view_width = View.GetWidth(0);
        var view_height = View.GetHeight(0);

        // For a classic-styled slightly offset camera, use 0.0 for X and -16.0 for Y
        var cameraFocusOffsetX = 0.0;
        var cameraFocusOffsetY = -16.0;

        var cameraDestinationX = cameraFocusOffsetX + this.X - (view_width / 2.0);
        var cameraDestinationY = cameraFocusOffsetY + this.Y - (view_height / 2.0);

        if (cameraDestinationX < this.CameraMinX)
            cameraDestinationX = this.CameraMinX;
        if (cameraDestinationX > this.CameraMaxX)
            cameraDestinationX = this.CameraMaxX;
        if (cameraDestinationY < this.CameraMinY)
            cameraDestinationY = this.CameraMinY;
        if (cameraDestinationY > this.CameraMaxY)
            cameraDestinationY = this.CameraMaxY;

        CameraX = Math.Clamp(cameraDestinationX, 0, this.LevelWidth - view_width);
        CameraY = Math.Clamp(cameraDestinationY, 0, this.LevelHeight - view_height);
    }

    //// Player
    event Player_StatusNone() { }
    event Player_StatusStanding() {
        if (!this.Ground) {
            this.Status = this.Player_StatusJumping;
            this.Player_LateAirUpdate();
            return;
        }

        var gspeed = this.GroundSpeed;
        if (gspeed == 0.0) {
            if (this.InputLeft) {
                this.PushingTimer--;
            }
            else if (this.InputRight) {
                this.PushingTimer++;
            }
            else {
                this.PushingTimer = 0;
            }
        }
        else if (this.InputLeft || this.InputRight) {
            if (gspeed < 0)
                gspeed = -gspeed;
            if (gspeed > 1)
                this.PushingTimer = 0;
        }
        else {
            this.PushingTimer = 0;
        }

        // If we are standing on the floor in regular gravity,
        //    or on the ceiling in flipped gravity.
        var standingOnRelativeFloor = false;
        if (this.IsUpsideDown)
            standingOnRelativeFloor = this.AngleMode == 2;
        else
            standingOnRelativeFloor = this.AngleMode == 0;
        if (!standingOnRelativeFloor)
            this.PushingTimer = 0;

        this.Player_UpdateRotation();
        this.Player_HandleAcceleration();

        if (this.CameraPtr)
            this.CameraPtr.PlayerInAir = false;

        this.MidAirFlag = 0;
        this.LateUpdateAirStatus = this.Player_StatusJumping;
        if (this.SkidTimer <= 0) {
            var pushingTimer = this.PushingTimer;
            if (pushingTimer > -3 && pushingTimer < 3) {
                var absGroundSpeed = Math.Abs(this.GroundSpeed);
                var angle = this.Angle;
                // Moving
                if (absGroundSpeed != 0.0 || angle >= 0x20 && angle <= 0xE0 && !this.IsUpsideDown) {
                    this.WaitTimer = 0;
                    this.OuttaHereTimer = 0;
                    if (absGroundSpeed >= this.WalkThreshold) {
                        if (absGroundSpeed >= this.RunThreshold) {
                            var isCertainAnim = this.CurrentAnimation;
                            isCertainAnim = isCertainAnim < 8 || isCertainAnim > 9;

                            if (absGroundSpeed < this.DashThreshold) {
                                this.AnimationSpeedMult = Math.Min((absGroundSpeed * 16.0 + 96.0), 512.0) / 128.0;
                                this.SetAnimation(8, isCertainAnim);
                                this.RunThreshold = 5.5;
                                this.DashThreshold = 12.0;
                            }
                            else {
                                this.AnimationSpeedMult = 1.0;
                                this.SetAnimation(9, isCertainAnim);
                                this.DashThreshold = 11.5;
                            }
                        }
                        else {
                            if (this.CurrentAnimation != 5 || this.CurrentFrame == 3) {
                                this.AnimationSpeedMult = 1.0;
                                this.SetAnimation(7, 0);
                            }
                            this.AnimationSpeedMult = (absGroundSpeed * 12.0 + 64.0) / 96.0;
                            this.WalkThreshold = 3.5;
                            this.RunThreshold = 6.0;
                        }
                    }
                    else {
                        var anim = this.CurrentAnimation;
                        if (anim == 7) {
                            if (this.CurrentFrame == 9)
                                this.SetAnimation(5, 9);
                        }
                        else if (anim == 6) {
                            this.SetAnimation(5, this.CurrentFrame);
                        }
                        else {
                            this.SetAnimation(5, 0);
                        }
                        this.AnimationSpeedMult = (absGroundSpeed * 16.0 + 48.0) / 64.0;
                        this.WalkThreshold = 4.0;
                    }
                }
                // Standing
                else {
                    this.WalkThreshold = this.WalkThresholdBase;
                    this.RunThreshold = this.RunThresholdBase;
                    this.DashThreshold = this.DashThresholdBase;

                    this.SensorRightX = 10.0;
                    this.SensorRightShortX = 5.0;
                    this.SensorMiddleX = 0.0;
                    this.SensorLeftShortX = -5.0;
                    this.SensorLeftX = -10.0;
                    this.SensorStartY = this.HitboxH * 0.5 + this.HitboxOffY;

                    // this.GroundSensorMask = 0;
                    this.GroundSensorMask |= 0x01 * this.Entity_CanFindTile(-69, 0, this.PlaneIndex, this.SensorRightX, this.SensorStartY, 10);
                    this.GroundSensorMask |= 0x02 * this.Entity_CanFindTile(-69, 0, this.PlaneIndex, this.SensorRightShortX, this.SensorStartY, 10);
                    this.GroundSensorMask |= 0x04 * this.Entity_CanFindTile(-69, 0, this.PlaneIndex, this.SensorMiddleX, this.SensorStartY, 10);
                    this.GroundSensorMask |= 0x08 * this.Entity_CanFindTile(-69, 0, this.PlaneIndex, this.SensorLeftShortX, this.SensorStartY, 10);
                    this.GroundSensorMask |= 0x10 * this.Entity_CanFindTile(-69, 0, this.PlaneIndex, this.SensorLeftX, this.SensorStartY, 10);

                    var groundSensorMask = this.GroundSensorMask - 1;
                    if (groundSensorMask == 0x00 || groundSensorMask == 0x02) {
                        if (this.Flip ||
                            this.UseChibiSprite == 1 ||
                            this.Character == Character_SONIC && this.SuperForm == 2) {
                            this.Flip = true;
                            this.AnimationSpeedMult = 1.0;
                            this.SetAnimation(21, 0);
                        }
                        else {
                            this.AnimationSpeedMult = 1.0;
                            this.SetAnimation(22, 0);
                        }
                    }
                    else if (groundSensorMask == 0x0F || groundSensorMask == 0x17) {
                        if (!this.Flip ||
                            this.UseChibiSprite == 1 ||
                            this.Character == Character_SONIC && this.SuperForm == 2) {
                            this.Flip = false;
                            this.AnimationSpeedMult = 1.0;
                            this.SetAnimation(21, 0);
                        }
                        else {
                            this.AnimationSpeedMult = 1.0;
                            this.SetAnimation(22, 0);
                        }
                    }
                    else if (groundSensorMask == 0x6E || groundSensorMask == 0x73) {
                        this.AnimationSpeedMult = 1.0;
                        this.SetAnimation(21, 0);
                    }
                    else {
                        var v22;
                        // TODO: Make this simpler with an array in OnCreate
                        this.AnimationSpeedMult = 1.0;
                        if (this.Character == Character_SONIC) {
                            v22 = this.WaitTimer;
                            if (v22 != 720 || this.UseChibiSprite || this.SuperForm == 2) {
                                if (v22 < 240) {
                                    this.WaitTimer = v22 + 1;
                                    this.SetAnimation(0, 0);
                                }
                                else if (this.CurrentAnimation == 1) {
                                    this.WaitTimer = v22 + 1;
                                    if (this.SuperForm == 2 && this.CurrentFrame == this.CurrentFrameCount - 1)
                                        this.WaitTimer = 0;
                                }
                                else {
                                    this.WaitTimer = v22 + 1;
                                    this.SetAnimation(1, 0);
                                }
                            }
                            else {
                                if (this.CurrentAnimation == 2) {
                                    if (this.CurrentFrame == this.CurrentFrameCount - 1)
                                        this.WaitTimer = 0;
                                }
                                else
                                    this.SetAnimation(2, 0);
                            }
                        }
                        else if (this.Character == Character_TAILS) {
                            v22 = this.WaitTimer;
                            if (v22 < 240) {
                                this.WaitTimer = v22 + 1;
                                this.SetAnimation(0, 0);
                            }
                            else if (this.CurrentAnimation == 1) {
                                if (this.CurrentFrame == this.CurrentFrameCount - 1)
                                    this.WaitTimer = 0;
                            }
                            else
                                this.SetAnimation(1, 0);
                        }
                        else if (this.Character == Character_KNUCKLES) {
                            v22 = this.WaitTimer;
                            if (v22 < 240) {
                                this.WaitTimer = v22 + 1;
                                this.SetAnimation(0, 0);
                            }
                            else if (this.CurrentAnimation == 1) {
                                if (this.CurrentFrame == 69)
                                    this.WaitTimer = 0;
                            }
                            else
                                this.SetAnimation(1, 0);
                        }
                        else if (this.Character == Character_MIGHTY) {
                            v22 = this.WaitTimer;
                            if (v22 < 240) {
                                this.WaitTimer = v22 + 1;
                                this.SetAnimation(0, 0);
                            }
                            else if (this.CurrentAnimation == 1) {
                                if (this.CurrentFrame == 35)
                                    this.WaitTimer = 0;
                            }
                            else
                                this.SetAnimation(1, 0);
                        }
                        else if (this.Character == Character_RAY) {
                            v22 = this.WaitTimer;
                            if (v22 < 240) {
                                this.WaitTimer = v22 + 1;
                                this.SetAnimation(0, 0);
                            }
                            else if (this.CurrentAnimation == 1) {
                                if (this.CurrentFrame == 55)
                                    this.WaitTimer = 0;
                            }
                            else {
                                this.SetAnimation(1, 0);
                            }
                        }

                        // LABEL_92:
                        if (this.OuttaHereTimer++ >= 72000000) {
                            this.AnimationSpeedMult = 1.0;
                            this.SetAnimation(27, 0);
                            // this.Status = sub_4CCE90;
                            this.UseGroundSpeed = false;
                            this.Unk0x44 = 0;
                            this.LateUpdateAirStatus = null;
                            this.LateUpdateGroundStatus = null;
                            this.XSpeed = 0.0;
                            this.YSpeed = 0.0;
                            // Sound.Play(this.SFX_OuttaHere);
                        }
                    }
                }
            }
            else {
                if (pushingTimer > 3)
                    this.PushingTimer = 3;
                if (pushingTimer < -3)
                    this.PushingTimer = -3;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(17, 0);
            }
        }
        else {
            var v5 = this.CurrentAnimation;

            // Custom
            this.CreateSkidDust();

            if (v5 == 13) {
                if ((this.Flip && this.GroundSpeed >= 0) ||
                    (!this.Flip && this.GroundSpeed <= 0)) {
                    // this.AnimationSpeedMult = 1.0;
                    this.SetAnimation(14, 0);
                }
                this.SkidTimer--;
            }
            else if (v5 == 14) {
                if (this.CurrentFrame == this.CurrentFrameCount - 1) {
                    this.Flip = !this.Flip;
                    this.SkidTimer = 1;
                    this.AnimationSpeedMult = 1.0;
                    this.SetAnimation(5, 0);
                }
                this.SkidTimer--;
            }
            else {
                var v6 = Math.Abs(this.GroundSpeed);
                this.SetAnimation(13, 0);
                if (v6 >= 6.0) {
                    var v7 = 144.0;
                    if (v6 >= 10.0)
                        v7 = 64.0;
                    this.AnimationSpeedMult = v7 / 128.0;
                }
                else {
                    this.SkidTimer -= 8;
                }
                Sound.Play(this.SFX_Skid);
                this.SkidTimer--;
            }
        }

        // LABEL_120:
        if (this.InputJumpPressed) {
            this.Player_DoJump();
            this.WaitTimer = 0;
        }
        else {
            var absGroundSpeed = Math.Abs(this.GroundSpeed);
            if (absGroundSpeed != 0.0) {
                var rollThreshold = 0.53125;
                if (this.Status == this.Player_StatusLookingDown)
                    rollThreshold = 1.0625;

                if (absGroundSpeed >= rollThreshold && !this.InputLeft && !this.InputRight && this.InputDown) {
                    // TODO:
                    this.Player_DoRoll();
                    Sound.Play(this.SFX_Roll);
                }
            }
            else {
                var v28 = this.Angle;
                if ((v28 < 0x20 || v28 > 0xE0) && !this.AngleMode || this.IsUpsideDown && v28 == 0x80) {
                    if (this.InputUp) {
                        this.AnimationSpeedMult = 1.0;
                        this.ResetAnimation(3, 1);
                        this.WaitTimer = 0;
                        this.Status = this.Player_StatusLookingUp;
                    }
                    else if (this.InputDown) {
                        this.AnimationSpeedMult = 1.0;
                        this.ResetAnimation(4, 1);
                        this.WaitTimer = 0;
                        this.Status = this.Player_StatusLookingDown;
                    }
                }
            }
        }
    }
    event Player_StatusJumping() {
        // TODO:
        this.UseGroundSpeed = true;
        this.Player_HandleAirAcceleration();
        if (this.Ground) {
            this.Status = this.Player_StatusStanding;

            if (this.CameraPtr)
                this.CameraPtr.PlayerInAir = false;

            this.MidAirFlag = 0;
            return;
        }
        else {
            this.Player_LateAirUpdate();

            this.LateUpdateGroundStatus = this.Player_StatusStanding;
            if (this.YSpeed > 0) {
                var v4 = this.CurrentAnimation;
                if (v4 >= 11) {
                    if (v4 <= 12) {
                        this.AnimationSpeedMult = 1.0;
                        this.SetAnimation(this.AnimationAfterSpring, 0);
                    }
                    else if (v4 == 23 && this.CurrentFrame == 0) {
                        this.AnimationSpeedMult = 1.0;
                        this.SetAnimation(6, 0);
                    }
                }
            }

            if (this.CurrentAnimation == 0 ||
                this.CurrentAnimation == 5) {
                if (this.AnimationSpeedMult > 1.0)
                    this.AnimationSpeedMult = 1.0;

                this.SetAnimation(6, this.CurrentFrame);
            }
            else if (
                this.CurrentAnimation == 3 ||
                this.CurrentAnimation == 4 ||
                this.CurrentAnimation == 14) {
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(6, this.CurrentFrame);
            }
            else if (this.CurrentAnimation == 7) {
                this.SetAnimation(6, 0);
            }
            else if (this.CurrentAnimation == 10) {
                if (this.JumpMovesetFunc && this.YSpeed >= this.JumpReleaseSpeed) {
                    this.JumpMovesetFunc();
                }
            }
            else if (this.CurrentAnimation == 13) {
                if (this.SkidTimer == 0) {
                    this.AnimationSpeedMult = 1.0;
                    this.SetAnimation(6, this.CurrentFrame % Sprite.GetFrameCount(this.Sprite, 6));
                }
                else
                    this.SkidTimer--;
            }
            else if (this.CurrentAnimation == 15) {
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);
            }
        }
    }
    event Player_StatusJumping_WithInputLock() {
        this.Player_UpdateRotation();

        var left = this.InputLeft;
        var right = this.InputRight;
        if (this.InputLock > 0) {
            this.InputLeft = false;
            this.InputRight = false;
            this.InputLock--;
        }

        this.Player_HandleAirAcceleration();

        this.InputLeft = left;
        this.InputRight = right;
        this.JumpAbility = 0;
        this.LateUpdateGroundStatus = this.Player_StatusRoll_WithInputLock;

        if (!this.Ground) {
            this.Player_LateAirUpdate();
        }
        else {
            this.Status = this.Player_StatusRoll_WithInputLock;
            if (this.CameraPtr)
                this.CameraPtr.PlayerInAir = false;
            this.MidAirFlag = 0;
        }
    }
    event Player_StatusLookingDown() {
        var v0, v1, v2, v3, v4, v5, v6;

        if (this.IsUpsideDown)
            this.Rotation = Math_PI;

        this.InputLeft = false;
        this.InputRight = false;

        this.Player_HandleAcceleration();

        if (this.CameraPtr)
            this.CameraPtr.PlayerInAir = false;

        this.MidAirFlag = 0;
        this.LateUpdateAirStatus = this.Player_StatusJumping;
        if (this.InputDown) {
            this.AnimationSpeedMult = 1.0;
            this.SetAnimation(4, 1);
            if (this.CurrentFrame == 4)
                this.AnimationSpeedMult = 0.0;

            if (this.WaitTimer < 60) {
                this.WaitTimer++;
            }
            else {
                v5 = this.CameraPtr;
                if (v5) {
                    if (this.IsUpsideDown) {
                        if (v5.OffsetY > -96 )
                            v5.OffsetY -= 2;
                    }
                    else {
                        if (v5.OffsetY < 96)
                            v5.OffsetY += 2;
                    }
                }
            }
            if (this.InputJumpPressed) {
                this.AnimationSpeedMult = 1.0;
                this.ResetAnimation(15, 0);
                this.Status = this.Player_StatusSpinDash;
                this.SpindashRev = 0.0;
                this.SpindashPitch = 0;
                Sound.Play(this.SFX_SpinCharge);
            }
            return;
        }

        this.AnimationSpeedMult = 1.0;
        if (this.CurrentFrame == 0 || this.InputLeft || this.InputRight)
            this.Status = this.Player_StatusStanding;

        if (this.InputJumpPressed)
            this.Player_DoJump();
    }
    event Player_StatusLookingUp() {
        if (this.IsUpsideDown)
            this.Rotation = Math_PI;

        if (this.CameraPtr)
            this.CameraPtr.PlayerInAir = false;

        this.MidAirFlag = 0;
        this.LateUpdateAirStatus = this.Player_StatusJumping;
        if (this.InputUp) {
            this.AnimationSpeedMult = 1.0;
            this.SetAnimation(3, 1);
            this.InputLeft = false;
            this.InputRight = false;

            this.Player_HandleAcceleration();

            if (this.CurrentFrame == 5)
                this.AnimationSpeedMult = 0.0;

            if (this.WaitTimer < 60) {
                this.WaitTimer++;
            }
            else {
                var v6 = this.CameraPtr;
                if (v6) {
                    if (this.IsUpsideDown) {
                        if (v6.OffsetY < 96.0)
                            v6.OffsetY += 2.0;
                    }
                    else {
                        if (v6.OffsetY > -96.0)
                            v6.OffsetY -= 2.0;
                    }
                }
            }
            if (!this.InputJumpPressed)
                return;

            if (this.GroundedUpFunc)
                return this.GroundedUpFunc();

            return this.Player_DoJump();
        }

        this.Player_HandleAcceleration();

        this.AnimationSpeedMult = 1.0;

        if (this.CurrentFrame == 0 || this.InputLeft || this.InputRight)
            this.Status = this.Player_StatusStanding;

        if (this.InputJumpPressed)
            this.Player_DoJump();
    }
    event Player_StatusSpinDash() {
        // Custom
        this.DashDustTimer = (this.DashDustTimer + 1) % 14;

        this.AnimationSpeedMult = 1.0;
        if (this.InputJumpPressed) {
            this.SpindashRev += 2.0;
            if (this.SpindashRev > 9.0)
                this.SpindashRev = 9.0;

            if (this.SpindashPitch < 12)
                this.SpindashPitch++;

            this.ResetAnimation(15, 0);
            Sound.Play(this.SFX_SpinCharge);
        }
        else {
            this.SpindashRev -= this.SpindashRev / 32.0;
        }

        if (!this.InputDown) {
            this.AnimationSpeedMult = 1.0;
            this.SetAnimation(10, 0);
            if (this.CameraPtr) {
                this.CameraLockTimer = 15;
                this.CameraPtr.Status = this.CameraPtr.Camera_StatusVerticalMove;
            }

            var baseSpeed = 8.0;
            if (this.SuperForm == 2)
                baseSpeed = 11.0 * 1.0;

            this.GroundSpeed = this.SpindashRev / 2.0 + baseSpeed;
            if (this.Flip)
                this.GroundSpeed = -this.GroundSpeed;

            Sound.Stop(this.SFX_SpinCharge);
            Sound.Play(this.SFX_SpinRelease);

            this.Player_DoRoll();
        }
    }
    event Player_StatusRoll() {
        this.Player_UpdateRotation();

        this.Player_HandleRollingAcceleration();

        this.JumpAbility = 0;
        if (!this.Ground) {
            this.Status = this.Player_StatusJumping;
            this.Player_LateAirUpdate();
        }
        else {
            if (this.Character == Character_TAILS)
                this.AnimationSpeedMult = 0.5;
            else
                this.AnimationSpeedMult = 4.0 / Math.Max(1.0, 5.0 - Math.Abs(this.GroundSpeed));

            if (this.CameraPtr)
                this.CameraPtr.PlayerInAir = false;
            this.MidAirFlag = 0;

            if (this.InputJumpPressed)
                this.Player_DoJump();
        }
    }
    event Player_StatusRoll_WithInputLock() {
        this.Player_UpdateRotation();

        var left = this.InputLeft;
        var right = this.InputRight;
        if (this.InputLock > 0) {
            this.InputLeft = false;
            this.InputRight = false;
            this.InputLock--;
        }

        this.Player_HandleRollingAcceleration();

        this.InputLeft = left;
        this.InputRight = right;
        this.JumpAbility = 0;

        if (!this.Ground) {
            this.Status = this.Player_StatusJumping_WithInputLock;
            this.Player_LateAirUpdate();
        }
        else {
            if (this.Character == Character_TAILS)
                this.AnimationSpeedMult = 0.5;
            else
                this.AnimationSpeedMult = 4.0 / Math.Max(1.0, 5.0 - Math.Abs(this.GroundSpeed));

            if (this.CameraPtr)
                this.CameraPtr.PlayerInAir = false;
            this.MidAirFlag = 0;
        }
    }
    event Player_StatusHurt() {
        if (this.Ground) {
            this.Status = this.Player_StatusStanding;

            var xspeed = this.XSpeed;
            if (xspeed >= -2.0) {
                if (xspeed <= 2.0)
                    this.GroundSpeed = 0.0;
                else
                    this.GroundSpeed -= 2.0;
            }
            else {
                this.GroundSpeed += 2.0;
            }

            this.WaitTimer = 0;
            this.PushingTimer = 0;
            this.InputLock = 0;

            if (this.CameraPtr) {
                this.CameraPtr.PlayerInAir = false;
            }

            this.MidAirFlag = 0;
            this.SkidTimer = 0;
        }
        else {
            if (this.CameraPtr) {
                this.CameraPtr.PlayerInAir = true;
                this.CameraPtr.SetOnJump = 32.0;
            }

            this.SkidTimer = 0;
            if (!this.Underwater)
                this.YSpeed += 0.1875;
            else
                this.YSpeed += 0.05859375;
        }
    }
    event Player_StatusDead() {
        global.CanPause = false;

        if (this.InvincibilityTimer) {
            this.InvincibilityTimer = 0;
            this.Visible = true;
        }

        this.YSpeed += this.GravityRate;
        this.XSpeed = 0.0;

        this.AnimationSpeedMult = 1.0;
        this.SetAnimation(19, 0);
        if (!this.IsSubPlayer) {
            var camera = this.CameraPtr;
            if (camera) {
                var maxY = camera.Y - camera.DestinationOffsetY + 384.0;
                if (this.Y > maxY)
                    this.Y = maxY;
                this.CameraLockTimer = 500;
            }

            if (this.YSpeed > 16.0)
                this.Player_HandleFinishDead();
        }
    }
    event Player_StatusDrown() {
        global.CanPause = false;

        if (this.SuperForm == 2)
            this.SuperForm = 3;

        if (this.InvincibilityTimer) {
            this.InvincibilityTimer = 0;
            this.Visible = true;
        }

        this.YSpeed += this.GravityRate;
        this.XSpeed = 0.0;

        this.AnimationSpeedMult = 1.0;
        this.SetAnimation(20, 0);
        if (!this.IsSubPlayer) {
            var camera = this.CameraPtr;
            if (camera) {
                var maxY = camera.Y - camera.DestinationOffsetY + 384.0;
                if (this.Y > maxY)
                    this.Y = maxY;
                this.CameraLockTimer = 500;
            }

            if (this.YSpeed > 8.0)
                this.Player_HandleFinishDead();
        }
    }
    event Player_StatusGimmick() { }
    event Player_StatusGimmick2() { }
    event Player_StatusHangingFromTails() {
        var tails = this.TailsPtr;
        if (tails && tails.Status != tails.Player_StatusTails_Flying)
            this.Status = this.Player_StatusJumping;
        if (this.Unk_0x1D8 != this.HangingFromTailsX)
            this.Status = this.Player_StatusJumping;

        if (this.Ground && this.YSpeed >= 0.0)
            this.Status = this.Player_StatusStanding;

        if (this.Status == this.Player_StatusHangingFromTails) {
            if (this.InputJumpPressed && this.InputDown) {
                var yspeed = -4.0;
                if (this.Underwater)
                    yspeed = -2.0;
                this.YSpeed = yspeed;
                this.Status = this.Player_StatusJumping;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);
            }
        }
        else if (tails) {
            tails.TailsGrabTimer = 30;
        }
    }
    event Player_Status_Cylinder_OuterHorizontal() {
        this.Player_HandleAcceleration();

        this.SkidTimer = 0;
        this.MidAirFlag = 0;

        var camera = this.CameraPtr;
        if (camera)
            camera.PlayerInAir = 0;

        if (this.InputJumpPressed) {
            this.Player_DoJump();
            if (this.RayGlideTurnValue == 128)
                this.YSpeed = -this.YSpeed;

            this.FlipFlag = this.Flip ^= 1;
            this.WaitTimer = 0;
        }
        else {
            var absGSP = Math.Abs(this.GroundSpeed);
            if (absGSP >= 0.53125 && !this.InputLeft && !this.InputRight && this.InputDown) {
                if (this.RayGlideTurnValue == 128)
                    this.Y -= this.RollHitboxDelta;
                else
                    this.Y += this.RollHitboxDelta;

                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);
                this.FlipFlag = this.Flip ^= 1;
                this.Status = this.Player_Status_Cylinder_OuterHorizontal_Rolling;
                Sound.Play(this.SFX_Roll);
            }
        }
    }
    event Player_Status_Cylinder_OuterHorizontal_Rolling() {
        this.Player_HandleRollingAcceleration();

        this.Angle = 0;

        if (this.Status == this.Player_StatusStanding) {
            this.FlipFlag = this.Flip ^= 1;
            this.Status = this.Player_Status_Cylinder_OuterHorizontal;
        }

        if (this.Character == Character_TAILS)
            this.AnimationSpeedMult = 0.5;
        else
            this.AnimationSpeedMult = 4.0 / Math.Max(1.0, 5.0 - Math.Abs(this.GroundSpeed));

        this.MidAirFlag = 0;

        var camera = this.CameraPtr;
        if (camera)
            camera.PlayerInAir = 0;

        if (this.InputJumpPressed) {
            this.Player_DoJump();
            if (this.RayGlideTurnValue == 128)
                this.YSpeed = -this.YSpeed;

            this.WaitTimer = 0;
        }
    }
    event Player_Status_Cylinder_OuterVertical() {
        if (this.Ground)
            this.Rotation = this.HexToRadians(this.Angle);
    }
    event Player_Status_Cylinder_MeshTubeExitSide() {
        this.InputDown = false;
        this.Player_StatusStanding();
    }
    event Player_StatusFrozen_PGZ() {
        if (this.XSpeed == 0.0) {
            this.Status = this.Player_StatusJumping;
            return;
        }

        if (this.Status == this.Player_StatusFrozen_PGZ) {
            this.HitboxW =
            this.HitboxH = 40.0;
            this.HitboxOffX =
            this.HitboxOffY = 0.0;
            if (this.Ground) {
                this.InputLeft =
                this.InputRight = false;

                var rollFriction = this.RollFriction;

                this.RollFriction = 0.0;
                this.Player_HandleRollingAcceleration();
                if (this.GroundSpeed)
                    this.GroundSpeed += 0.0762939453125 * Static.HexSin(this.Angle);

                var camera = this.CameraPtr;
                if (camera)
                    camera.PlayerInAir = false;

                this.MidAirFlag = 0;

                this.RollFriction = rollFriction;

                if (this.Status == this.Player_StatusStanding)
                    this.Status = this.Player_StatusFrozen_PGZ;
            }
            else {
                this.YSpeed += 0.21875;
            }
        }
    }
    event Player_StatusSinking_OOZ() {
        var topSpeed = this.TopSpeed;
        var acceleration = this.Acceleration;

        this.TopSpeed = topSpeed * 0.625;
        this.Acceleration = acceleration * 0.625;

        var gsp = this.GroundSpeed;
        var newTopSpeed = this.TopSpeed;
        if (gsp < -newTopSpeed) {
            this.GroundSpeed = gsp + 0.21875;
        }
        else if (gsp > newTopSpeed) {
            this.GroundSpeed = gsp - 0.21875;
        }

        this.Y += 1.0;
        this.InputUp = false;
        this.InputDown = false;
        this.Ground = true;
        this.Player_StatusStanding();

        this.TopSpeed = topSpeed;
        this.Acceleration = acceleration;
    }
    event Player_StatusSliding_OOZ() { }
    event Player_StatusSwitchingToBG_MMZ() { }
    event Player_StatusSwitchingToFG_MMZ() { }
    event Player_StatusTurningSmall_MMZ() { }
    event Player_StatusTurningBig_MMZ() { }
    event Player_StatusStartFlyingIn() {

    }
    event Player_StatusFlyingIn() {
        var mainPlayer = null, aiPlayer = this;
        with ("Player") {
            if (this != aiPlayer && !this.IsSubPlayer) {
                mainPlayer = this;
                break;
            }
        }
        if (!mainPlayer)
            return;

        this.OffscreenTimer = 0;
        this.UseGroundSpeed = false;
        this.Interactable = false;

        this.AnimationSpeedMult = 1.0;
        if (this.Character == Character_TAILS) {
            if (this.Underwater)
                this.SetAnimation(52, 0);
            else
                this.SetAnimation(48, 0);
        }
        else if (this.Character == Character_KNUCKLES)
            this.SetAnimation(48, 0);
        else
            this.SetAnimation(10, 0);

        this.Priority = DrawGroup_AboveTiles;

        var targetX = this.RespawnDestinationEntityX;
        var targetY = this.RespawnDestinationEntityY;
        var vw = View.GetWidth(0) * 1.5;
        var vh = View.GetHeight(0) * 1.5;
        if (targetX < mainPlayer.X - vw ||
            targetX > mainPlayer.X + vw ||
            targetY < mainPlayer.Y - vh ||
            targetY > mainPlayer.Y + vh) {
            targetX = mainPlayer.X;
            targetY = View.GetY(0) - 128.0; // mainPlayer.Y;
        }

        var cameraPtr = this.CameraPtr;
        // if (cameraPtr && global.GameMode != GameModes_Encore && cameraPtr.PlayerPtr != this.RespawnDestinationEntity) {
        //     cameraPtr.X = targetX;
        //     cameraPtr.Y = targetY;
        // }

        if (this.MaxGlideSpeed || this.Character == Character_TAILS || this.Character == Character_KNUCKLES) {
            if (this.TraceTargetPositionX < targetX - 16.0) {
                this.FlipFlag = 1;
                if (this.XSpeed > -4.0)
                    this.XSpeed -= 1.0;
            }
            else if (this.TraceTargetPositionX > targetX + 16.0) {
                this.FlipFlag = 0;
                if (this.XSpeed <  4.0)
                    this.XSpeed += 1.0;
            }

            this.Priority = DrawGroup_AboveTiles;
            targetX += this.XSpeed;
            targetY += 1.0;

            this.RespawnDestinationEntityX = this.X = targetX;
            this.RespawnDestinationEntityY = this.Y = targetY;

            var mainPlayerStatus = mainPlayer.Status;
            if (mainPlayerStatus != mainPlayer.Player_StatusDead &&
                mainPlayerStatus != mainPlayer.Player_StatusDrown &&
                mainPlayerStatus != mainPlayer.Player_StatusRoll_WithInputLock) {
                // && abs(v33) <= 0x40000
                // v29 = target->Obj.Position.Y;
                // if (Player_ClassInfo->AiTargetPosition.Y - v29 >= 0)
                //     v30 = Player_ClassInfo->AiTargetPosition.Y - v29;
                // else
                //     v30 = v29 - Player_ClassInfo->AiTargetPosition.Y;
                // if (v30 < 0x20000)
                //     sub_33A9E0(player);

                if (Math.Abs(this.TraceTargetPositionX - this.X) > 64.0)
                    return;
                if (this.Y < this.TraceTargetPositionY - 64.0)
                    return;

                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);
                this.Ground = false;
                this.UseGroundSpeed = true;
                this.Interactable = true;
                this.InputLock = 0;
                this.Angle = 0;
                this.Status = this.Player_StatusJumping;

                this.InputStatus = this.Player_InputStatus_AI;
                this.XSpeed = mainPlayer.XSpeed;
                this.GroundSpeed = mainPlayer.GroundSpeed;
                this.TracedInputUp = 0;
                this.TracedInputDown = 0;
                this.TracedInputLeft = 0;
                this.TracedInputRight = 0;
                this.TracedInputJump = 0;
                this.TracedInputJumpPressed = 0;

                this.PlaneIndex = mainPlayer.PlaneIndex;
                this.Priority = mainPlayer.Priority - 1;
            }
        }

    }
    event Player_StatusJumpingIn() { }
    event Player_StatusSpringBasic() { }
    event Player_StatusScoreCard() { }
    event Player_StatusTransportTube_CPZ() { }
    event Player_StatusTransforming() {
        var zone = this.Zone;
        if (zone && !zone.StaticWorldInertia) {
            this.X += zone.StaticWorldInertia;
        }
        // var cameraPtr = this.CameraPtr;

        this.Invincibility = 60;
        if (this.WaitTimer++ == 36) {
            this.ImageTrail.Player = this;

            Sound.Play(this.SFX_Transform2);

            this.SuperForm = SuperState_Super;
            this.Player_ResetSpeeds();

            if (this.UseChibiSprite) {
                this.IsTransforming = false;
                this.Interactable = true;
                this.Status = this.Player_StatusJumping;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(5, 3);
                return;
            }

            this.LoadCharacterSprites();
        }

        if (!this.UseChibiSprite && this.CurrentFrame == this.CurrentFrameCount - 1) {
            this.IsTransforming = false;
            this.Interactable = true;
            this.Status = this.Player_StatusJumping;
            this.AnimationSpeedMult = 1.0;
            this.SetAnimation(5, 3);
        }

        // th
    }
    event Player_Status_BubbleShieldBounce() {
        if (this.Shield == ShieldType_BUBBLE && !this.Invincibility && this.SuperForm != 2) {
            if (!this.Ground) {
                this.Player_HandleAirAcceleration();
                this.Player_LateAirUpdate();
                return;
            }

            var power = 7.5;
            if (this.Underwater)
                power = 4.0;
            power += this.GravityRate;

            this.Ground = false;

            var sin = Static.HexSin(this.Angle);
            var cos = Static.HexCos(this.Angle);

            this.XSpeed = this.GroundSpeed * cos + power * sin;
            this.YSpeed = this.GroundSpeed * sin - power * cos;

            if (this.CameraPtr) {
                this.CameraPtr.PlayerInAir = true;
                this.CameraPtr.SetOnJump = 32.0;
            }

            this.AnimationSpeedMult = 4.0 / Math.Max(1.0, 5.0 - Math.Abs(this.GroundSpeed));
            this.SetAnimation(10, 0);

            this.ShieldObject.SetAnimation(9, 0);

            this.Angle = 0;
            this.AngleMode = 0;
            this.JumpAbility = 0;
            this.MidAirFlag = 1;

            Sound.Play(this.SFX_ShieldAction_Bubble);
        }
        this.Status = this.Player_StatusJumping;
    }
    event Player_StatusStartRespawn() {
        this.MaxGlideSpeed++;
        if (this.MaxGlideSpeed == 2) {
            var mainPlayer = null, aiPlayer = this;
            with ("Player") {
                if (this != aiPlayer && !this.IsSubPlayer) {
                    mainPlayer = this;
                    break;
                }
            }
            if (!mainPlayer)
                return;

            // this.Visible = false;
            // this.Priority = 0;
            this.UseGroundSpeed = false;
            this.Interactable = false;
            this.WentOffscreen = false;
            this.Priority = DrawGroup_AboveTiles + 1;
            this.Angle = 0x80;

            var characterFlag = this.Character;
            if (characterFlag != Character_TAILS && characterFlag != Character_KNUCKLES || global.GameMode == GameModes_Encore) {

            }
            else {
                this.RespawnDestinationEntityX = mainPlayer.X;
                this.RespawnDestinationEntityY = View.GetY(0) - 128.0;
                this.Status = this.Player_StatusFlyingIn;
                this.MaxGlideSpeed = 0;
            }
        }
    }
    // Sonic
    event Player_StatusSonic_DropDash() {
        var dashspeed;
        var maxspeed;
        if (this.Ground) {
            if (this.CameraPtr) {
                this.CameraPtr.PlayerInAir = false;
            }

            this.MidAirFlag = 0;

            if (this.InputRight)
                this.Flip = false;
            if (this.InputLeft)
                this.Flip = true;

            if (this.SuperForm) {
                dashspeed = 12.0;
                maxspeed = 13.0;
                if (this.CameraPtr) {
                    this.CameraPtr.SetShake(6, 6);
                }
            }
            else {
                dashspeed = 8.0;
                maxspeed = 12.0;
            }

            if (this.Flip) {
                if (this.XSpeed <= 0.0)
                    this.GroundSpeed = Math.Max(-maxspeed, -dashspeed + (this.GroundSpeed / 4.0));
                else if (this.Angle != 0x00)
                    this.GroundSpeed = -dashspeed + (this.GroundSpeed / 2.0);
                else
                    this.GroundSpeed = -dashspeed;
            }
            else {
                if (this.XSpeed >= 0.0)
                    this.GroundSpeed = Math.Min(maxspeed, dashspeed + (this.GroundSpeed / 4.0));
                else if (this.Angle != 0x00)
                    this.GroundSpeed = dashspeed + (this.GroundSpeed / 2.0);
                else
                    this.GroundSpeed = dashspeed;
            }

            // Set camera lag
            var zone = this.Zone;
            var cameraPtr = this.CameraPtr;
            if (cameraPtr && zone && !zone.StaticWorldInertia) {
                this.CameraLockTimer = 8;
                cameraPtr.Status = cameraPtr.Camera_StatusVerticalMove;
            }

            // Spawn dust
            var dust = Instance.Create("Dust", this.X, this.Y + this.HitboxH * 0.5 + this.HitboxOffY);
            dust.SetAnimation(2, 0);
            dust.Priority = this.Priority;
            dust.Flip = this.Flip;

            // Stop sounds
            Sound.Stop(this.SFX_DropDash);
            Sound.Stop(this.SFX_SpinCharge);
            if (this.SuperForm == 2)
                Sound.Play(this.SFX_PeelRelease);
            else
                Sound.Play(this.SFX_SpinRelease);

            this.AnimationSpeedMult = 1.0;
            this.SetAnimation(10, 0);
            if (this.AngleMode == 0)
                this.Y += this.RollHitboxDelta;
            this.PushingTimer = 0;
            this.Status = this.Player_StatusRoll;
            return;
        }

        if (this.InputJump) {
            this.Player_HandleAirAcceleration();
            this.Player_LateAirUpdate();

            this.AnimationSpeedMult = Math.Min(this.AnimationSpeedMult + 0.0625, 1.0);
        }
        else {
            this.MidAirFlag = 0;
            this.AnimationSpeedMult = 1.0;
            this.SetAnimation(10, 0);
            this.Status = this.Player_StatusJumping;
        }
    }
    event Player_StatusSonic_Peelout() { }
    // Tails
    event Player_StatusTails_Flying() {
        var mainPlayer = null, aiPlayer = this;
        with ("Player") {
            if (this != aiPlayer && !this.IsSubPlayer) {
                mainPlayer = this;
                break;
            }
        }

        this.Player_HandleAirAcceleration();
        if (this.Ground) {
            this.Status = this.Player_StatusStanding;
            this.Player_LateAirUpdate();
            return;
        }

        var timeLen = 480;
        // var timeLen = 80;

        var yspeed = this.YSpeed;
        if (yspeed < -1.0) {
            this.RayGlideSpeedStore = 0.03125;
        }
        else if (yspeed < 1.0) {
            var val = this.RayGlideTurnValue;
            if (val >= 60)
                this.RayGlideSpeedStore = 0.03125;
            else
                this.RayGlideTurnValue = val + 1;
        }

        this.YSpeed += this.RayGlideSpeedStore;

        var index = 0;
        if (!this.IsSubPlayer)
            index = 0; // this shuold be the entity slot index

        var zone = this.Zone;
        if (zone && this.Y < zone.MinPlayerY[this.PlayerID] + 16.0 && this.YSpeed < 0.0)
            this.YSpeed = 0.0;

        if (mainPlayer && global.GameMode != GameModes_Competition && !this.UseChibiSprite && !mainPlayer.UseChibiSprite)
            this.Player_HandleTailsGrabbing(mainPlayer);

        if (this.WaitTimer >= timeLen) {
            if (!this.Underwater) {
                // if (this)
            }
            return;
        }

        if (this.Underwater) {
            this.SetAnimation(52, 0);
            this.AnimationSpeedMult = 2.0;
            if (this.YSpeed >= 0.0)
                this.AnimationSpeedMult = 1.0;
        }
        else {
            if (this.Status != this.Player_StatusHangingFromTails || this.YSpeed >= 0.0)
                this.SetAnimation(48, 0);
            else
                this.SetAnimation(52, 0);

            this.AnimationSpeedMult = 2.0;
            if (this.YSpeed >= 0.0)
                this.AnimationSpeedMult = 1.0;
        }

        this.WaitTimer++;
        if (this.WaitTimer == timeLen) {
            if (!this.Underwater) {
                // this.Underwater
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(49, 0);
            }
            else {
                this.AnimationSpeedMult = 1.0;
                if (this.Status == this.Player_StatusHangingFromTails)
                    this.SetAnimation(54, 0);
                else
                    this.SetAnimation(53, 0);
            }
        }

        if (this.InputJumpPressed && (!this.Underwater || !mainPlayer || mainPlayer.Status != this.Player_StatusHangingFromTails)) {
            if (this.InputDown) {
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);
                this.Status = this.Player_StatusJumping;
                this.Player_LateAirUpdate();
                return;
            }
            this.RayGlideSpeedStore = -0.0625;
            this.RayGlideTurnValue = 0;
        }
    }
    event Player_StatusTails_Hanging() { }
    // Knuckles
    event Player_StatusKnuckles_GlidingLeft() {
        var left = true;
        var turnTimer, glideSpeedStore;
        if (!this.Ground) {
            if (this.InputJump) {
                turnTimer = this.WaitTimer;
                glideSpeedStore = this.RayGlideSpeedStore;
                if (left ? turnTimer != 0x100 : turnTimer != 0) {
                    if (glideSpeedStore < 4.0) {
                        this.RayGlideSpeedStore = glideSpeedStore + 0.0625;
                    }
                }
                else if (glideSpeedStore < 24.0) {
                    this.RayGlideSpeedStore = glideSpeedStore + 0.015625;
                }

                var yspeed = this.YSpeed;
                if (yspeed <= 0.5)
                    this.YSpeed = yspeed + 0.125;
                else
                    this.YSpeed = yspeed - 0.125;

                if (left ? turnTimer < 0x100 : turnTimer > 0)
                    this.WaitTimer = left ? turnTimer + 4 : turnTimer - 4;

                var check1Y, check2Y, v8, v10, v11;
                if (this.UseChibiSprite) {
                    check1Y = -1.0;
                    check2Y = 3.0;
                }
                else {
                    check1Y = -2.0;
                    check2Y = 11.0;
                }

                var postCheck1X = 0.0, postCheck2X = 0.0;
                if (left ? this.WaitTimer < 0x80 : this.WaitTimer >= 0x80) {
                    v8 = 0;
                    v10 = 0;
                }
                else {
                    var initialX = this.X;

                    if (left) {
                        this.X = initialX + this.XSpeed;
                        v8 = Static.Entity_CheckTileCollision(this, 0xFFFF, 3, this.PlaneIndex, -12.0, check1Y, true);
                        postCheck1X = this.X;

                        this.X = initialX + this.XSpeed;
                        v10 = Static.Entity_CheckTileCollision(this, 0xFFFF, 3, this.PlaneIndex, -12.0, check2Y, true);
                        postCheck2X = this.X;
                    }
                    else {
                        this.X = initialX + this.XSpeed;
                        v8 = Static.Entity_CheckTileCollision(this, 0xFFFF, 1, this.PlaneIndex, 12.0, check1Y, true);
                        postCheck1X = this.X;

                        this.X = initialX + this.XSpeed;
                        v10 = Static.Entity_CheckTileCollision(this, 0xFFFF, 1, this.PlaneIndex, 12.0, check2Y, true);
                        postCheck2X = this.X;
                    }

                    this.X = initialX;
                }

                var initXSpeed = this.XSpeed;
                var outXSpeed = this.RayGlideSpeedStore * Static.HexCos(this.WaitTimer >> 1);
                var v14 = initXSpeed;
                this.XSpeed = outXSpeed;

                if (!initXSpeed && outXSpeed) {
                    v14 = 0.0;
                    this.RayGlideSpeedStore = 4.0;
                    this.XSpeed = this.RayGlideSpeedStore * Static.HexCos(this.WaitTimer >> 1);
                }

                if (left ? this.InputRight : this.InputLeft) {
                    this.Status = left ? this.Player_StatusKnuckles_GlidingRight : this.Player_StatusKnuckles_GlidingLeft;
                    this.Flip = !left;
                    this.AnimationSpeedMult = 1.0;
                    this.ResetAnimation(this.CurrentAnimation, 0);
                }
                else if (v14 == 0.0 && this.WaitTimer == (left ? 0x100 : 0)) {
                    if (v8 || v10) {
                        this.WaitTimer = 0;
                        if (postCheck1X == postCheck2X) {
                            this.Status = this.Player_StatusKnuckles_Climbing;
                            this.GroundSpeed = 0.0;
                            this.XSpeed = 0.0;
                            this.YSpeed = 0.0;
                            Sound.Play(this.SFX_GlideGrab);
                        }
                        else {
                            // LABEL_32:
                            this.XSpeed *= 0.25;
                            this.RayGlideSpeedStore = 0.0;
                            this.AnimationSpeedMult = 1.0;
                            this.SetAnimation(49, 0);
                            this.Status = this.Player_StatusKnuckles_Falling;
                        }
                    }
                }
            }
            else {
                // LABEL_31:
                this.WaitTimer = 0;
                // LABEL_32:
                this.XSpeed *= 0.25;
                this.RayGlideSpeedStore = 0.0;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(49, 0);
                this.Status = this.Player_StatusKnuckles_Falling;
            }
        }
        else {
            if (this.AngleMode) {
                this.Status = this.Player_StatusStanding;

                var camera = this.CameraPtr;
                if (camera)
                    camera.PlayerInAir = false;

                this.MidAirFlag = 0;
                this.SkidTimer = 0;
            }
            else {
                this.WaitTimer = 0;
                this.Status = this.Player_StatusKnuckles_Sliding;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(51, 0);
                this.GroundSpeed = this.XSpeed;
                this.CreateSkidDust();
            }
        }

        // TODO:
        // LABEL_38:
        if (this.Y < 0.0 + 16.0) {
            this.XSpeed = 0.0;
            this.RayGlideSpeedStore = 0.0;
        }
    }
    event Player_StatusKnuckles_GlidingRight() {
        var left = false;
        var turnTimer, glideSpeedStore;
        if (!this.Ground) {
            if (this.InputJump) {
                turnTimer = this.WaitTimer;
                glideSpeedStore = this.RayGlideSpeedStore;
                if (left ? turnTimer != 0x100 : turnTimer != 0) {
                    if (glideSpeedStore < 4.0) {
                        this.RayGlideSpeedStore = glideSpeedStore + 0.0625;
                    }
                }
                else if (glideSpeedStore < 24.0) {
                    this.RayGlideSpeedStore = glideSpeedStore + 0.015625;
                }

                var yspeed = this.YSpeed;
                if (yspeed <= 0.5)
                    this.YSpeed = yspeed + 0.125;
                else
                    this.YSpeed = yspeed - 0.125;

                if (left ? turnTimer < 0x100 : turnTimer > 0)
                    this.WaitTimer = left ? turnTimer + 4 : turnTimer - 4;

                var check1Y, check2Y, v8, v10, v11;
                if (this.UseChibiSprite) {
                    check1Y = -1.0;
                    check2Y = 3.0;
                }
                else {
                    check1Y = -2.0;
                    check2Y = 11.0;
                }

                var postCheck1X = 0.0, postCheck2X = 0.0;
                if (left ? this.WaitTimer < 0x80 : this.WaitTimer >= 0x80) {
                    v8 = 0;
                    v10 = 0;
                }
                else {
                    var initialX = this.X;

                    if (left) {
                        this.X = initialX + this.XSpeed;
                        v8 = Static.Entity_CheckTileCollision(this, 0xFFFF, 3, this.PlaneIndex, -12.0, check1Y, true);
                        postCheck1X = this.X;

                        this.X = initialX + this.XSpeed;
                        v10 = Static.Entity_CheckTileCollision(this, 0xFFFF, 3, this.PlaneIndex, -12.0, check2Y, true);
                        postCheck2X = this.X;
                    }
                    else {
                        this.X = initialX + this.XSpeed;
                        v8 = Static.Entity_CheckTileCollision(this, 0xFFFF, 1, this.PlaneIndex, 12.0, check1Y, true);
                        postCheck1X = this.X;

                        this.X = initialX + this.XSpeed;
                        v10 = Static.Entity_CheckTileCollision(this, 0xFFFF, 1, this.PlaneIndex, 12.0, check2Y, true);
                        postCheck2X = this.X;
                    }

                    this.X = initialX;
                }

                var initXSpeed = this.XSpeed;
                var outXSpeed = this.RayGlideSpeedStore * Static.HexCos(this.WaitTimer >> 1);
                var v14 = initXSpeed;
                this.XSpeed = outXSpeed;

                if (!initXSpeed && outXSpeed) {
                    v14 = 0.0;
                    this.RayGlideSpeedStore = 4.0;
                    this.XSpeed = this.RayGlideSpeedStore * Static.HexCos(this.WaitTimer >> 1);
                }

                if (left ? this.InputRight : this.InputLeft) {
                    this.Status = left ? this.Player_StatusKnuckles_GlidingRight : this.Player_StatusKnuckles_GlidingLeft;
                    this.Flip = !left;
                    this.AnimationSpeedMult = 1.0;
                    this.ResetAnimation(this.CurrentAnimation, 0);
                }
                else if (v14 == 0.0 && this.WaitTimer == (left ? 0x100 : 0)) {
                    if (v8 || v10) {
                        this.WaitTimer = 0;
                        if (postCheck1X == postCheck2X) {
                            this.Status = this.Player_StatusKnuckles_Climbing;
                            this.GroundSpeed = 0.0;
                            this.XSpeed = 0.0;
                            this.YSpeed = 0.0;
                            Sound.Play(this.SFX_GlideGrab);
                        }
                        else {
                            // LABEL_32:
                            this.XSpeed *= 0.25;
                            this.RayGlideSpeedStore = 0.0;
                            this.AnimationSpeedMult = 1.0;
                            this.SetAnimation(49, 0);
                            this.Status = this.Player_StatusKnuckles_Falling;
                        }
                    }
                }
            }
            else {
                // LABEL_31:
                this.WaitTimer = 0;
                // LABEL_32:
                this.XSpeed *= 0.25;
                this.RayGlideSpeedStore = 0.0;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(49, 0);
                this.Status = this.Player_StatusKnuckles_Falling;
            }
        }
        else {
            if (this.AngleMode) {
                this.Status = this.Player_StatusStanding;

                var camera = this.CameraPtr;
                if (camera)
                    camera.PlayerInAir = false;

                this.MidAirFlag = 0;
                this.SkidTimer = 0;
            }
            else {
                this.WaitTimer = 0;
                this.Status = this.Player_StatusKnuckles_Sliding;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(51, 0);
                this.GroundSpeed = this.XSpeed;
                this.CreateSkidDust();
            }
        }

        // TODO:
        // LABEL_38:
        if (this.Y < 0.0 + 16.0) {
            this.XSpeed = 0.0;
            this.RayGlideSpeedStore = 0.0;
        }
    }
    event Player_StatusKnuckles_Sliding() {
        if (!this.Ground) {
            this.WaitTimer = 0;
            this.AnimationSpeedMult = 1.0;
            this.SetAnimation(49, 0);
            this.Status = this.Player_StatusKnuckles_Falling;
            return;
        }

        var staticWorldInertia = this.Zone ? this.Zone.StaticWorldInertia : 0.0;
        if (this.GroundSpeed && !staticWorldInertia) {
            if (!this.WaitTimer)
                Sound.Play(this.SFX_GlideSlide);

            this.WaitTimer = (this.WaitTimer + 1) & 7;
            if (this.CurrentFrame == 2)
                this.AnimationSpeedMult = 0.0;

            var gsp = this.GroundSpeed;
            if (Math.Abs(gsp) < 0.125 || !this.InputJump) {
                this.ResetAnimation(this.CurrentAnimation, 3);
                this.WaitTimer = 0;
                this.GroundSpeed = 0.0;
            }
            else if (this.InputJump) {
                if (gsp <= 0.0)
                    this.GroundSpeed = gsp + 0.125;
                else
                    this.GroundSpeed = gsp - 0.125;
            }
            return;
        }

        var camera = this.CameraPtr;
        if (camera)
            camera.PlayerInAir = false;

        this.MidAirFlag = 0;
        this.AnimationSpeedMult = 1.0;
        if (this.WaitTimer >= 16) {
            this.Status = this.Player_StatusStanding;
            this.SkidTimer = 0;
        }
        else {
            this.WaitTimer++;
        }
    }
    event Player_StatusKnuckles_Climbing() {
        if (this.Ground) {
            this.Status = this.Player_StatusStanding;

            var camera = this.CameraPtr;
            if (camera)
                camera.PlayerInAir = false;

            this.MidAirFlag = 0;
        }
        else {
            if (this.InputUp) {
                if (this.SuperForm == 2)
                    this.YSpeed = -2.0;
                else
                    this.YSpeed = -1.0;

                var cameraMinY = 0.0 + 20.0;
                if (this.Y < cameraMinY)
                    this.Y = cameraMinY;
            }
            else if (this.InputDown) {
                if (this.SuperForm == 2)
                    this.YSpeed = 2.0;
                else
                    this.YSpeed = 1.0;
            }
            else {
                this.YSpeed = 0.0;
            }

            if (this.InputJumpPressed) {
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);

                this.Status = this.Player_StatusJumping;
                this.JumpAbility = 0;
                this.MidAirFlag = 1;
                Sound.Play(this.SFX_Jump);

                if (this.Flip) {
                    this.XSpeed = 4.0;
                    this.GroundSpeed = 4.0;
                    this.Flip = false;
                }
                else {
                    this.XSpeed = -4.0;
                    this.GroundSpeed = -4.0;
                    this.Flip = true;
                }

                this.YSpeed = -3.5;
                if (this.Underwater) {
                    this.XSpeed *= 0.5;
                    this.GroundSpeed *= 0.5;
                    this.YSpeed = -1.75;
                }
            }
            // TODO:
            else {
                this.AnimationSpeedMult = 1.0;

                this.GetHitboxFromSprite(this.Sprite, this.CurrentAnimation, this.CurrentFrame, 0);

                var checkTopY, checkWallY, offsetX, offsetY;
                if (this.UseChibiSprite) {
                    checkTopY = -4.0;
                    checkWallY = 4.0;
                    offsetY = -12.0;
                }
                else {
                    checkTopY = -10.0;
                    checkWallY = 11.0;
                    offsetY = -20.0;
                }

                var initialX = this.X;
                var checkTop = false, checkWall = false;
                var checkTopX = this.X;

                if (this.Flip) {
                    // Lfet
                    checkTop = Static.Entity_MoveToTileCollision(this, 0xFFFF, 3, this.PlaneIndex, -this.HitboxW * 0.5 + this.HitboxOffX - 1.0, checkTopY, 8.0);
                    checkTopX = this.X;

                    this.X = initialX;
                    checkWall = Static.Entity_MoveToTileCollision(this, 0xFFFF, 3, this.PlaneIndex, -this.HitboxW * 0.5 + this.HitboxOffX - 1.0, checkWallY, 8.0);

                    offsetX = -4.0;
                    if (this.YSpeed < 0.0 && this.X < checkTopX)
                        this.YSpeed = 0.0;
                }
                else {
                    // RIght
                    checkTop = Static.Entity_MoveToTileCollision(this, 0xFFFF, 1, this.PlaneIndex, this.HitboxW * 0.5 + this.HitboxOffX, checkTopY, 8.0);
                    checkTopX = this.X;

                    this.X = initialX;
                    checkWall = Static.Entity_MoveToTileCollision(this, 0xFFFF, 1, this.PlaneIndex, this.HitboxW * 0.5 + this.HitboxOffX, checkWallY, 8.0);

                    offsetX = 4.0;
                    if (this.YSpeed < 0.0 && this.X > checkTopX)
                        this.YSpeed = 0.0;
                }

                this.Y += this.YSpeed;

                // if (Static.Entity_CheckTileCollision(this, 0xFFFF, 2, this.PlaneIndex, offsetX, offsetY, true))
                //     this.YSpeed = 0.0;

                if (checkTop) {
                    if (checkWall) {
                        this.AnimationSpeedMult = 1.0;

                        var yspeed = this.YSpeed;
                        if (yspeed < 0) {
                            this.SetAnimation(53, 0);
                        }
                        else if (yspeed > 0) {
                            this.SetAnimation(54, 0);
                        }
                        else {
                            this.SetAnimation(52, 0);
                        }

                        this.YSpeed = 0.0;
                    }
                    else {
                        this.AnimationSpeedMult = 1.0;
                        this.SetAnimation(49, 0);
                        this.YSpeed = 0.0;
                        this.Status = this.Player_StatusKnuckles_Falling;
                    }
                }
                else {
                    this.Y = Math.Floor(this.Y);

                    if (this.UseChibiSprite)
                        this.Y -= 1.0;
                    else
                        this.Y += 2.0;

                    this.YSpeed = 0.0;
                    this.X = initialX;
                    this.Status = this.Player_StatusKnuckles_GettingUp;
                    this.WaitTimer = 1;
                    this.UseGroundSpeed = false;
                }
            }
        }
    }
    event Player_StatusKnuckles_GettingUp() {
        this.InputLeft = false;
        this.InputRight = false;
        this.AnimationSpeedMult = 1.0;
        this.SetAnimation(16, 1);

        this.AutoAnimate = false;
        this.Animate();

        var frame = this.CurrentFrame;
        if (this.WaitTimer != frame) {
            var v7 = frame == 6;
            if (frame < 6) {
                this.WaitTimer = frame;
                if (!this.UseChibiSprite) {
                    if (this.Flip)
                        this.X -= 5.0;
                    else
                        this.X += 5.0;
                    this.Y -= 8.0;
                }
                else {
                    if (this.Flip)
                        this.X -= 4.0;
                    else
                        this.X += 4.0;
                    this.Y -= 4.0;
                }
            }
        }
        if (frame == 6) {
            this.Ground = true;
            this.UseGroundSpeed = true;
        }
        if (frame == 9 - 1) {
            this.WaitTimer = 0;
            this.Status = this.Player_StatusStanding;
            this.AutoAnimate = true;
        }
    }
    event Player_StatusKnuckles_Falling() {
        if (this.Ground) {
            if (this.WaitTimer == 0) {
                Sound.Play(this.SFX_GlideLand);
            }

            var camera = this.CameraPtr;
            if (camera)
                camera.PlayerInAir = false;

            this.MidAirFlag = 0;

            var staticWorldInertia = this.Zone ? this.Zone.StaticWorldInertia : 0.0;
            if (Math.Abs(staticWorldInertia) > 2.0) {
                if (staticWorldInertia <= 0.0) {
                    this.GroundSpeed = staticWorldInertia + 2.0;
                }
                else {
                    this.GroundSpeed = staticWorldInertia + 2.0;
                }
                this.XSpeed = this.GroundSpeed;
                this.WaitTimer = 16;
            }
            else {
                this.GroundSpeed = 0.0;
                this.XSpeed = 0.0;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(50, 0);
            }

            if (this.WaitTimer >= 16) {
                this.Status = this.Player_StatusStanding;
                this.SkidTimer = 0;
                this.WaitTimer = 0;
            }
            else {
                this.WaitTimer++;
            }
        }
        else {
            this.Player_HandleAirAcceleration();
            this.Player_LateAirUpdate();
        }
    }
    // Mighty
    event Player_StatusMighty_HammerDrop() {
        if (this.Ground) {
            this.InputLock = 0;

            var bounce = 1.0;
            if (this.Underwater)
                bounce = 2.0;
            bounce = this.GravityRate + bounce;
            this.Ground = false;

            var angle = this.Angle;
            var sin = Static.HexSin(angle);
            var cos = Static.HexCos(angle);
            var gspeed = this.GroundSpeed;

            this.XSpeed = gspeed * 0.75 * cos - bounce * sin;
            this.YSpeed = gspeed * 0.75 * sin - bounce * cos;

            if (this.CameraPtr) {
                this.CameraPtr.PlayerInAir = false;
                this.CameraPtr.SetOnJump = 32.0;
            }

            this.SetAnimation(10, 0);
            this.AnimationSpeedMult = 4.0 / Math.Max(1.0, 5.0 - Math.Abs(this.GroundSpeed));

            Sound.Stop(this.SFX_MightyDrill);
            Sound.Play(this.SFX_MightyLand);

            if (this.CameraPtr) {
                this.CameraPtr.SetShake(0, 4);
            }

            this.Player_SpawnMovingDust(1.0);
            this.Player_SpawnMovingDust(1.5);
            this.Player_SpawnMovingDust(2.0);
            this.Player_SpawnMovingDust(-1.0);
            this.Player_SpawnMovingDust(-1.5);
            this.Player_SpawnMovingDust(-2.0);

            this.Angle = 0;
            this.AngleMode = 0;
            this.JumpAbility = 0;
            this.MidAirFlag = 3;

            var invinc = this.Invincibility;
            if (invinc > 0) {
                if (invinc < 8)
                    this.Invincibility = 8;
                this.Status = this.Player_StatusJumping;
            }
            else {
                this.Invincibility = -8;
                this.Status = this.Player_StatusJumping;
            }
        }
        else {
            this.Player_HandleAirAcceleration();
            this.Player_LateAirUpdate();
            if (this.YSpeed <= 1.0) {
                this.Status = this.Player_StatusJumping;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);
            }
        }
    }
    event Player_StatusMighty_UnspinInvincible() {
        this.Player_HandleAirAcceleration();
        if (this.Ground) {
            this.Status = this.Player_StatusStanding;
            if (this.CameraPtr) {
                this.CameraPtr.PlayerInAir = false;
            }
            this.MidAirFlag = 0;
        }
        else {
            this.InvincibilityTimer++;
            if (this.CameraPtr) {
                this.CameraPtr.PlayerInAir = true;
                this.CameraPtr.SetOnJump = 32.0;
            }

            this.Player_LateAirUpdate();
            // TODO: do this here
        }
    }
    // Ray
    event Player_StatusRay_Flying() {
        // Ray is facing up
        if (this.RayFacingUp) {
            if (this.RayGlideTurnValue <  0x70)
                this.RayGlideTurnValue += 8;
        }
        // Ray is facing down
        else {
            if (this.RayGlideTurnValue >  0x10)
                this.RayGlideTurnValue -= 8;
        }

        if (this.RayGlideSpeedStore != 0.0) {
            if (this.Underwater)
                this.YSpeed += this.RayGlideSpeedStore / 2.0;
            else
                this.YSpeed += this.RayGlideSpeedStore / 4.0;

            if (this.YSpeed < this.RayGlideSpeedStore) {
                this.YSpeed = this.RayGlideSpeedStore;
                this.RayGlideSpeedStore = 0.0;
            }
        }
        else {
            this.YSpeed += this.GravityRate * Static.HexCosMedPrec(this.RayGlideTurnValue);
        }
        this.YSpeed = Math.Max(this.YSpeed, -6.0);

        if (this.RayFacingUp) {
            var tempYSpeed = this.YSpeed;
            if (tempYSpeed > 1.0)
                this.YSpeed = tempYSpeed * 0.75;
        }

        var storedYSpeed = this.YSpeed;
        if (storedYSpeed <= 0.0) {
            this.MaxGlideSpeed -= 0.0859375 * Static.HexSin(0x50 - this.RayGlideTurnValue);
            this.MaxGlideSpeed = Math.Max(this.MaxGlideSpeed, 4.0);
        }
        else if (storedYSpeed > this.MaxGlideSpeed) {
            this.MaxGlideSpeed = storedYSpeed * 0.984375;
        }

        if (this.XSpeed != 0.0) {
            var v23 = 0x50 - this.RayGlideTurnValue;
            if (this.Flip) {
                this.XSpeed -= 0.0859375 * Static.HexSin(v23);
                this.XSpeed = Math.Clamp(this.XSpeed, -this.MaxGlideSpeed, -1.0);
            }
            else {
                this.XSpeed += 0.0859375 * Static.HexSin(v23);
                this.XSpeed = Math.Clamp(this.XSpeed, 1.0, this.MaxGlideSpeed);
            }
        }

        if (this.InputLock > 0) {
            this.InputLock--;
        }
        else {
            var did = true;
            if (this.Flip) {
                if (!this.InputRight || this.RayGlideTurnValue != 0x10) {
                    if (this.InputLeft && this.RayGlideTurnValue == 0x70 && this.RayFacingUp) {
                        // Fly down
                        this.AnimationSpeedMult = 1.0;
                        this.SetAnimation(49, 3);
                        Sound.Play(this.SFX_RayDive);
                        this.RayFacingUp = false;
                        this.RayGlideSpeedStore = 0.0;
                    }
                    did = false;
                }
            }
            else if (!this.InputLeft || this.RayGlideTurnValue != 0x10) {
                if (this.InputRight && this.RayGlideTurnValue == 0x70 && this.RayFacingUp) {
                    // Fly down
                    this.AnimationSpeedMult = 1.0;
                    this.SetAnimation(49, 3);
                    Sound.Play(this.SFX_RayDive);
                    this.RayFacingUp = false;
                    this.RayGlideSpeedStore = 0.0;
                }
                did = false;
            }

            if (did && !this.RayFacingUp) {
                this.RayFacingUp = 1;

                var yspTurn = 2.5;
                if (this.Underwater)
                    yspTurn = 1.5;

                if (this.YSpeed > yspTurn || this.RayBoostCount == 0x100) {
					var XCalcSpeed = Math.Abs(this.XSpeed) / 4.0;
                    var YCalcSpeed = Math.Abs(this.YSpeed) / 2.0;

					var speedStore = -(this.RayBoostCount / 256.0 * (YCalcSpeed + (XCalcSpeed) + (YCalcSpeed / 8.0)));

					this.RayGlideSpeedStore = speedStore;
					if (this.Underwater)
						this.RayGlideSpeedStore = (speedStore / 2.0) + (speedStore / 8.0);

					if (this.RayBoostCount > 0x10)
						this.RayBoostCount = this.RayBoostCount - 0x20;

                    this.RayGlideSpeedStore = Math.Max(this.RayGlideSpeedStore, -6.0);
                }

                // Fly up
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(48, 3);
                Sound.Play(this.SFX_RaySwoop);
            }

            if (!this.IsGhost && !this.Underwater) {
                var anim = this.CurrentAnimation;
                if (anim == 49) {
                    // Sound.Play(this.SFX_RayDive);
                }
                else if (anim == 48) {
                    // Sound.Play(this.SFX_RaySwoop);
                }
            }
        }

        if (this.Ground) {
            var gspeed = this.GroundSpeed;
            if (Math.Abs(gsp) < 2.0)
                this.GroundSpeed *= 2.0;

            this.Status = this.Player_StatusStanding;

            var cameraPtr = this.CameraPtr;
            if (cameraPtr)
                cameraPtr.PlayerInAir = false;

            this.MidAirFlag = 0;
            this.SkidTimer = 0;
            this.RayGlideTurnValue = 0;

            Sound.Stop(this.SFX_RayDive);
            Sound.Stop(this.SFX_RaySwoop);
        }
        else {
            var zoneMinY = 0.0;
            var zone = this.Zone;
            if (zone)
                zoneMinY = zone.MinPlayerY[this.PlayerID] + 16.0;

            if (!this.InputJump || Math.Abs(this.XSpeed) < 1.0 || this.Y < zoneMinY) {
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);
                this.Status = this.Player_StatusJumping;
                Sound.Stop(this.SFX_RayDive);
                Sound.Stop(this.SFX_RaySwoop);

                this.MidAirFlag = 2;
            }
        }
        // Ceiling detect

    }
    // ERSS
    event Player_StatusEggReverieSuperForm() {
        this.AnimationSpeedMult = 1.0;
        if (this.Character == Character_KNUCKLES)
            this.SetAnimation(48, 6);
        else
            this.SetAnimation(8, 0);
        this.Ground = false;

        // Vertical movement
        if (this.InputUp) {
            var yspeed = this.YSpeed;
            if (yspeed > -this.TopSpeed) {
                yspeed = yspeed - this.Acceleration;
                if (yspeed > 0.0)
                    yspeed = yspeed - this.Acceleration;
                this.YSpeed = yspeed;
            }
        }
        else if (this.InputDown) {
            var yspeed = this.YSpeed;
            if (yspeed < this.TopSpeed) {
                yspeed = yspeed + this.Acceleration;
                if (yspeed < 0.0)
                    yspeed = yspeed + this.Acceleration;
                this.YSpeed = yspeed;
            }
        }
        else {
            var absYspeed = Math.Abs(this.YSpeed);
            var signYspeed = Math.Sign(this.YSpeed);
            if (absYspeed < this.Friction) {
                this.YSpeed = 0.0;
            }
            else {
                this.YSpeed -= signYspeed * this.Friction;
            }
        }

        // Horizontal movement
        if (this.InputLeft) {
            var xspeed = this.XSpeed;
            if (xspeed > -this.TopSpeed) {
                xspeed = xspeed - this.Acceleration;
                if (xspeed > 0.0)
                    xspeed = xspeed - this.Acceleration;
                this.XSpeed = xspeed;
            }
        }
        else if (this.InputRight) {
            var xspeed = this.XSpeed;
            if (xspeed < this.TopSpeed) {
                xspeed = xspeed + this.Acceleration;
                if (xspeed < 0.0)
                    xspeed = xspeed + this.Acceleration;
                this.XSpeed = xspeed;
            }
        }
        else {
            var absYspeed = Math.Abs(this.YSpeed);
            var signYspeed = Math.Sign(this.YSpeed);
            if (absYspeed < this.Friction) {
                this.YSpeed = 0.0;
            }
            else {
                this.YSpeed -= signYspeed * this.Friction;
            }
        }
    }
    // Move Sets
    event Player_MovesetSonic() {
        if (this.MidAirFlag == 1) {
            if (this.InputJumpPressed && (this.InputStatus != this.Player_InputStatus_AI || (this.InputUp == 1 && global.GameMode != GameModes_Encore))) {
                if (this.Invincibility) {
                    if (!(global.MedalMods & 0x10))
                        this.MidAirFlag++;
                }
                else {
                    var shield = this.Shield;
                    if (shield == ShieldType_NONE) {
                        if (global.MedalMods & 0x08) {
                            this.Invincibility = -8;
                            this.MidAirFlag = 0;
                            Sound.Play(this.SFX_ShieldAction_Insta);
                        }
                        else if (!(global.MedalMods & 0x10)) {
                            this.MidAirFlag++;
                        }
                    }
                    else if (shield == ShieldType_BASIC) {
                        if (!(global.MedalMods & 0x10))
                            this.MidAirFlag++;
                    }
                    else if (shield == ShieldType_BUBBLE) {
                        // NOTE: S3K style
                        if (false)
                            this.XSpeed = 0.0;
                        // NOTE: Mania style
                        else
                            this.XSpeed /= 2.0;

                        this.YSpeed = 8.0;
                        this.Status = this.Player_Status_BubbleShieldBounce;
                        this.LateUpdateGroundStatus = null;
                        this.LateUpdateAirStatus = null;

                        this.ShieldObject.SetAnimation(7, 0);
                        Sound.Play(this.SFX_ShieldAction_Bubble);
                    }
                    else if (shield == ShieldType_FIRE) {
                        this.ShieldObject.SetAnimation(2, 0);
                        this.ShieldObject.Flip = this.Flip;

                        this.MidAirFlag = 0;
                        this.YSpeed = 0.0;
                        this.XSpeed = this.Flip ? -8.0 : 8.0;

                        var zone = this.Zone;
                        var cameraPtr = this.CameraPtr;
                        if (cameraPtr && zone && !zone.StaticWorldInertia) {
                            this.CameraLockTimer = 15;
                            cameraPtr.Status = cameraPtr.Camera_StatusVerticalMove;
                        }

                        Sound.Play(this.SFX_ShieldAction_Fire);
                    }
                    else if (shield == ShieldType_ELECTRIC) {
                        this.MidAirFlag = 0;
                        this.YSpeed = -5.5;
                        if (this.IsUpsideDown)
                            this.YSpeed = 5.5;

                        Sound.Play(this.SFX_ShieldAction_Electric);
                    }
                }
            }
            return;
        }
        if (this.MidAirFlag >= 1 && this.InputJump) {
            this.MidAirFlag++;
            if (this.MidAirFlag > 21) {
                this.Status = this.Player_StatusSonic_DropDash;
                this.LateUpdateGroundStatus = null;
                this.LateUpdateAirStatus = null;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(16, 0);
                Sound.Play(this.SFX_DropDash);
            }
        }
    }
    event Player_MovesetTails() {
        if (this.InputJumpPressed &&
            this.MidAirFlag == 1 &&
            (this.InputStatus != this.Player_InputStatus_AI || (this.InputUp == 1 && global.GameMode != GameModes_Encore))) {
            if (!this.IsUpsideDown) {
                this.MidAirFlag = 0;
                this.WaitTimer = 0;
                this.RayGlideSpeedStore = 0.03125;
                this.AnimationSpeedMult = 1.0;
                if (!this.Underwater)
                    this.SetAnimation(48, 0);
                else
                    this.SetAnimation(52, 0);
                this.Status = this.Player_StatusTails_Flying;
                this.LateUpdateGroundStatus = null;
                this.LateUpdateAirStatus = null;
            }
        }
    }
    event Player_MovesetKnuckles() {
        if (this.InputJumpPressed && this.MidAirFlag == 1) {
            // if (!this.IsUpsideDown) {
                this.MidAirFlag = 0;
                this.WaitTimer = 0;
                this.RayGlideSpeedStore = 4.0;
                if (this.YSpeed < 0.0)
                    this.YSpeed = 0.0;

                if (this.Flip) {
                    this.Status = this.Player_StatusKnuckles_GlidingLeft;
                    this.XSpeed = -4.0;
                    this.WaitTimer = 0x100;
                }
                else {
                    this.Status = this.Player_StatusKnuckles_GlidingRight;
                    this.XSpeed = 4.0;
                    this.WaitTimer = 0x0;
                }

                this.LateUpdateGroundStatus = null;
                this.LateUpdateAirStatus = null;
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(48, 6);
            // }
        }
    }
    event Player_MovesetMighty() {
        var midAirFlag = this.MidAirFlag;
        if (midAirFlag <= 1) {
            if (!this.InputJumpPressed ||
                midAirFlag != 1 ||
                false
                // this.InputStatus == this.Player_InputStatus_AI && (this.InputUp != 1 || global.GameMode == 1)
                ) {
                // if ( *(_DWORD *)(dword_D17620 + 144 * this.ControllerID + 100) == 1 )
                //     sub_338280(GameState->CurrentEntitySlot, *(_DWORD *)(*(_DWORD *)(dword_D36A20 + 16) + 112));
            }
            else if (this.IsUpsideDown != 1) {
                var yspeed = 12.0;
                if (this.Underwater)
                    yspeed = 8.0;

                this.XSpeed *= 0.5;
                this.MidAirFlag = 0;
                this.YSpeed = yspeed;

                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(16, 2);
                this.LateUpdateAirStatus = null;
                this.LateUpdateGroundStatus = null;
                Sound.Play(this.SFX_SpinRelease);

                this.ImageTrail.Player = this;

                var zone = this.Zone;
                var cameraPtr = this.CameraPtr;
                if (cameraPtr && zone && !zone.StaticWorldInertia) {
                    this.CameraLockTimer = 8;
                    cameraPtr.Status = cameraPtr.Camera_StatusHorizontalMove;
                }
                Sound.Play(this.SFX_MightyDrill);
                this.Status = this.Player_StatusMighty_HammerDrop;
            }
        }
        else {
            this.MidAirFlag = midAirFlag - 1;
            if (midAirFlag == 2)
                this.MidAirFlag = 0;
        }
    }
    event Player_MovesetRay() {
        if (this.InputJumpPressed &&
            this.MidAirFlag == 1 &&
            (this.InputStatus != this.Player_InputStatus_AI || (this.InputUp && global.GameMode != GameModes_Encore))) {
            if (this.IsUpsideDown != 1) {
                // Adjust speed
                this.XSpeed *= 0.875;

                // Set to minimum speed
                var minSpeed = 3.0;
                if (this.Underwater)
                    minSpeed = 1.5;

                if (this.Flip) {
                    if (this.XSpeed > -minSpeed)
                        this.XSpeed = -minSpeed;
                }
                else if (this.XSpeed < minSpeed) {
                    this.XSpeed = minSpeed;
                }

                //
                if ((this.Flip || !this.InputRight) && (!this.Flip || !this.InputLeft)) {
                    // Fly up
                    this.AnimationSpeedMult = 1.0;
                    this.SetAnimation(48, 3);
                    // Sound.Play(this.SFX_RaySwoop);

                    this.RayFacingUp = true;
                    this.XSpeed *= 0.5;

                    var absSpeed = Math.Abs(this.XSpeed) / 2.0;
                    var speedStore = -absSpeed * 0.625;
                    if (this.Underwater)
                        speedStore *= 0.5;
                    speedStore = Math.Min(speedStore, 4.0);

                    this.RayGlideSpeedStore = speedStore;
                }
                else {
                    // Fly down
                    this.AnimationSpeedMult = 1.0;
                    this.SetAnimation(49, 3);
                    // Sound.Play(this.SFX_RayDive);
                    this.RayFacingUp = false;
                    this.RayGlideSpeedStore = 0.0;
                }

                this.YSpeed *= 0.5;
                this.RayGlideTurnValue = 0x40;
                this.MaxGlideSpeed = Math.Abs(this.XSpeed);
                this.Status = this.Player_StatusRay_Flying;
                this.RayBoostCount = 0x100;
                this.LateUpdateAirStatus = null;
                this.WaitTimer = 0;
            }
        }
        else {
            // if ( ControllerList[player->ControllerID].Y.Press == 1 )
            //     Player_HandleSuperForm(GameStatePtr->CurrentEntity, *(*(SaveGame_ClassInfo + 16) + 112));
        }
    }
    event Player_MovesetERSS() { }

    // Handling
    event Player_HandleFallOff() {
        // Custom:
        if (this.Status == this.Player_StatusRoll_WithInputLock)
            return;

        if (this.AngleMode != 0) {
            if (this.Angle >= 0x40 && this.Angle <= 0xC0) {
                if (this.GroundSpeed > -2.0 && this.GroundSpeed < 2.0) {
                    this.XSpeed = this.GroundSpeed * Static.HexCos(this.Angle);
                    this.YSpeed = this.GroundSpeed * Static.HexSin(this.Angle);
                    this.Ground = false;
                    this.Angle = 0;
                    this.AngleMode = 0;
                }
            }
        }
    }
    event Player_HandleAcceleration() {
        var inputLockTimer,
            inputLeft,
            inputRight;

        inputLockTimer = this.InputLock;
        if (inputLockTimer > 0) {
            this.InputLock = inputLockTimer - 1;
            if (this.IsUpsideDown)
                return;

            this.GroundSpeed += Static.HexSin(this.Angle) * 0.125;
            return this.Player_HandleFallOff(); // goto LABEL_69;
        }
        else {
            if (this.IsUpsideDown) {
                inputLeft = this.InputRight;
                inputRight = this.InputLeft;
            }
            else {
                inputLeft = this.InputLeft;
                inputRight = this.InputRight;
            }

            if (inputLeft) {
                if (this.GroundSpeed > -this.TopSpeed) {
                    // Going left
                    if (this.GroundSpeed <= 0.0) {
                        this.GroundSpeed -= this.Acceleration;
                    }
                    // Going right
                    else {
                        if (!this.AngleMode && this.GroundSpeed > 4.0) { // && !Zone_Info->dword154
                            this.Flip = false;
                            this.SkidTimer = 24;
                        }

                        if (this.GroundSpeed < this.Deceleration)
                            this.GroundSpeed = -this.Deceleration;
                        else
                            this.GroundSpeed -= this.Deceleration;
                    }
                }
                if (this.GroundSpeed <= 0.0 && this.SkidTimer < 1)
                    this.Flip = true;
            }
            if (inputRight) {
                if (this.GroundSpeed < this.TopSpeed) {
                    // Going right
                    if (this.GroundSpeed >= 0.0) {
                        this.GroundSpeed += this.Acceleration;
                    }
                    // Going left
                    else {
                        if (!this.AngleMode && this.GroundSpeed < -4.0) { // && !Zone_Info->dword154
                            this.Flip = true;
                            this.SkidTimer = 24;
                        }

                        if (this.GroundSpeed > -this.Deceleration)
                            this.GroundSpeed = this.Deceleration;
                        else
                            this.GroundSpeed += this.Deceleration;
                    }
                }
                if (this.GroundSpeed >= 0.0 && this.SkidTimer < 1)
                    this.Flip = false;
            }

            if (this.InputLeft || this.InputRight) {
                if (this.IsUpsideDown)
                    return;

                // Slope
                this.GroundSpeed += Static.HexSin(this.Angle) * 0.125;

                if (this.InputRight) {
                    if (!this.InputLeft) {
                        if (this.Angle > 0xC0 && this.Angle < 0xE4 &&
                            this.GroundSpeed > -2.0 && this.GroundSpeed < 2.5) {
                            this.InputLock = 30;
                        }
                    }
                }
                else {
                    if (this.InputLeft) {
                        if (this.Angle > 0x1C && this.Angle < 0x40 &&
                            this.GroundSpeed < 2.0 && this.GroundSpeed > -2.5) {
                            this.InputLock = 30;
                        }
                    }
                }

                // LABEL_69:
                return this.Player_HandleFallOff();
            }

            var spd;
            if (this.GroundSpeed <= 0.0) {
                spd = this.GroundSpeed + this.Friction;
                if (spd > 0.0)
                    spd = 0.0;
                this.GroundSpeed = spd;
            }
            else {
                spd = this.GroundSpeed - this.Friction;
                if (spd < 0.0)
                    spd = 0.0;
                this.GroundSpeed = spd;
            }

            if (!this.IsUpsideDown) {
                if (this.GroundSpeed > 0.125 || this.GroundSpeed < -0.125)
                    this.GroundSpeed += Static.HexSin(this.Angle) * 0.125;

                if ((this.Angle <= 0xC0 || this.Angle >= 0xE4) && (this.Angle <= 0x1C || this.Angle >= 0x40))
                    return this.Player_HandleFallOff();

                if (this.GroundSpeed > -1.0 && this.GroundSpeed < 1.0)
                    this.InputLock = 30;
                else
                    return this.Player_HandleFallOff();
            }
        }
    }
    event Player_HandleRollingAcceleration() {
        // var canMoveLeftRight = this.InputLock == 0;

        var rollDeceleration = this.RollDeceleration;
        var rollFriction = this.RollFriction;

        // Rolling ground deceleration
        if (this.InputLeft) {
            if (this.GroundSpeed > 0.0)
                this.GroundSpeed -= rollDeceleration;
        }
        else if (this.InputRight) {
            if (this.GroundSpeed < 0.0)
                this.GroundSpeed += rollDeceleration;
        }

        // Rolling friction
        if (Math.Abs(this.GroundSpeed) < rollFriction)
            this.GroundSpeed = 0.0;
        else
            this.GroundSpeed -= Math.Sign(this.GroundSpeed) * rollFriction;

        // Rolling slope acceleration
        var sin = -Static.HexSin(this.Angle);
        if (Math.Sign(this.GroundSpeed) == Math.Sign(sin))
            sin = (this.SlopeRollUp * sin);
        else
            sin = (this.SlopeRollDown * sin);

        if (Math.Abs(this.GroundSpeed) < Math.Abs(sin))
            this.GroundSpeed = 0.0;
        else
            this.GroundSpeed -= sin;

        // Hard Roll Speed Cap in Mania
        this.GroundSpeed = Math.Clamp(this.GroundSpeed, -18.0, 18.0);

        // Handle stopping and fall off
        if (this.AngleMode == 0) {
            if (this.Status == this.Player_StatusRoll_WithInputLock) {
                if (Math.Abs(this.GroundSpeed) < 1.0)
                    this.GroundSpeed = this.Flip ? -4.0 : 4.0;
            }
            else {
                if (Math.Abs(this.GroundSpeed) < rollFriction) {
                    this.Status = this.Player_StatusStanding;
                    this.GroundSpeed = 0.0;
                }
            }
        }
        else if (this.AngleMode == 2) {
            if (this.IsUpsideDown) {
                if (Math.Abs(this.GroundSpeed) < rollFriction) {
                    this.Status = this.Player_StatusStanding;
                    this.GroundSpeed = 0.0;
                }
            }
            else {
                this.Player_HandleFallOff();
            }
        }
        else {
            if (this.Status == this.Player_StatusRoll_WithInputLock) {
                if (Math.Abs(this.GroundSpeed) < 1.0)
                    this.GroundSpeed = this.Flip ? -4.0 : 4.0;
            }

            this.Player_HandleFallOff();
        }
    }
    event Player_HandleAirAcceleration() {
        if (this.YSpeed < 0.0 && this.YSpeed > -4.0) {
            this.XSpeed -= this.XSpeed / 32.0;
        }

        // Air acceleration
        if (this.InputLeft) {
            if (this.XSpeed > -this.TopSpeed)
                this.XSpeed -= this.AirAcceleration;
            this.Flip = true;
        }
        else if (this.InputRight) {
            if (this.XSpeed < this.TopSpeed)
                this.XSpeed += this.AirAcceleration;
            this.Flip = false;
        }
    }
    event Player_HandleSuperForm(flag) {
        if (this.SuperForm)
            this.Invincibility = 60;

        var i = 0;
        // Palette.SetColor(0, i + 0x40, );
        // Palette.SetColor(0, i + 0x46, );
        // Palette.SetColor(0, i + 0x50, );
        // Palette.SetColor(0, i + 0x60, );
        // Palette.SetColor(0, i + 0x71, );

        this.Player_ResetSpeeds();
    }
    event Player_HandleTailsGrabbing(mainPlayer) {
        if (mainPlayer == this)
            return;

        var tailsGrabTimer = this.TailsGrabTimer;
        if (tailsGrabTimer > 0)
            this.TailsGrabTimer = tailsGrabTimer - 1;

        var prospectiveGrabbedPlayerY = this.Y + 28.0;
        if (mainPlayer.CurrentAnimation == 10)
            prospectiveGrabbedPlayerY = this.Y + 33.0;

        var relX = this.X - mainPlayer.X;
        var relY = prospectiveGrabbedPlayerY - mainPlayer.Y;
        var mainPlayerStatus = mainPlayer.Status;
        if (mainPlayerStatus != this.Player_StatusHangingFromTails && (!mainPlayer.Ground || this.YSpeed < 0.0)) {
            var isRolling = mainPlayerStatus == this.Player_StatusRoll;
            var canGrab = isRolling
                || mainPlayerStatus == this.Player_StatusLookingUp
                || mainPlayerStatus == this.Player_StatusLookingDown
                || mainPlayerStatus == this.Player_StatusJumping
                || mainPlayerStatus == this.Player_StatusStanding;
            if ((canGrab && mainPlayer.CurrentAnimation != 25) &&
                Math.Abs(relX) < 12.0 &&
                Math.Abs(relY) < 12.0 &&
                !this.TailsGrabTimer &&
                !mainPlayer.InputDown &&
                !mainPlayer.Ground) {
                mainPlayer.SetAnimation(28, 0);
                mainPlayer.Status = this.Player_StatusHangingFromTails;
                mainPlayer.TailsPtr = this;
                mainPlayer.LateUpdateAirStatus = null;
                mainPlayer.LateUpdateGroundStatus = null;
                Sound.Play(this.SFX_Grab);
            }
        }

        if (mainPlayer.Status == this.Player_StatusHangingFromTails) {
            var playerX = this.X;
            var playerY = this.Y;
            var xspeed = this.XSpeed;
            var yspeed = this.YSpeed;

            this.UpdateHitbox(1);
            this.Entity_ApplyPhysics();

            if (this.Ground && this.AngleMode == 0)
                this.VerticalCollisionFlag |= 1;

            mainPlayer.Unk_0x1D8 = Math.Floor(this.X);
            mainPlayer.Unk_0x1DC = Math.Floor(this.Y);

            mainPlayer.XSpeed = this.XSpeed = xspeed;
            mainPlayer.YSpeed = this.YSpeed = yspeed;
            mainPlayer.X = this.X = playerX;
            mainPlayer.Y = playerY + 28.0;
            this.Y = playerY;

            mainPlayer.UpdateHitbox(1);
            mainPlayer.Entity_ApplyPhysics();
            if (mainPlayer.Ground)
                mainPlayer.VerticalCollisionFlag |= 1;

            mainPlayer.PlaneIndex = this.PlaneIndex;
            mainPlayer.FlipFlag = this.FlipFlag;
            mainPlayer.Flip = this.Flip;
            mainPlayer.XSpeed = 0.0;
            mainPlayer.YSpeed = 0.0;
        }
    }

    event Player_DoJump() {
        var jumpHeight = this.JumpHeight;
        if (this.Underwater)
            jumpHeight -= 3.0;

        var finalJumpHeight = this.GravityRate + jumpHeight;
        this.InputLock = 0;
        this.Ground = false;
        // TODO:
        if (this.AngleMode == 0 && this.Status != this.Player_StatusRoll)
            this.Y += this.RollHitboxDelta;

        this.XSpeed = this.GroundSpeed * Static.HexCos(this.Angle);
        this.YSpeed = this.GroundSpeed * Static.HexSin(this.Angle);
        this.XSpeed -= finalJumpHeight * -Static.HexSin(this.Angle);
        this.YSpeed -= finalJumpHeight * Static.HexCos(this.Angle);

        // TODO:
        var camera;
        if (camera = this.CameraPtr) {
            camera.PlayerInAir = true;
            camera.SetOnJump = 32.0;
        }
        this.SetAnimation(10, 0);
        if (this.Character == Character_TAILS) {
            this.AnimationSpeedMult = 0.5;
        }
        else {
            this.AnimationSpeedMult = 4.0 / Math.Max(1.0, 5.0 - Math.Abs(this.GroundSpeed));
        }

        this.Angle = 0;
        this.AngleMode = 0;
        this.SkidTimer = 0;
        this.JumpAbility = 1;
        this.MidAirFlag = 1;
        this.Status = this.Player_StatusJumping;

        Sound.Play(this.SFX_Jump);
    }
    event Player_DoRoll() {
        this.AnimationSpeedMult = 1.0;
        this.SetAnimation(10, 0);

        this.PushingTimer = 0;
        this.Status = this.Player_StatusRoll;
        if (this.AngleMode == 0 && this.Ground) {
            this.Y += this.RollHitboxDelta;
        }
    }
    event Player_DoRollWithInputLock() {
        if (this.Status != this.Player_StatusRoll_WithInputLock && this.Status != this.Player_StatusJumping_WithInputLock) {
            if (this.CurrentAnimation != 10) {
                Sound.Play(this.SFX_Roll);
                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(10, 0);
                this.PushingTimer = 0;
                if (this.AngleMode == 0 && this.Ground) {
                    this.Y += this.RollHitboxDelta;
                }
            }

            var onGround = this.Ground;
            if (onGround)
                this.Status = this.Player_StatusRoll_WithInputLock;
            else
                this.Status = this.Player_StatusJumping_WithInputLock;
            this.LateUpdateGroundStatus = null;
            this.LateUpdateAirStatus = null;

            var gsp = this.GroundSpeed;
            if (gsp > -1.0 && gsp < 1.0) {
                if (this.Flip & 1)
                    this.GroundSpeed = -4.0;
                else
                    this.GroundSpeed = 4.0;
            }
        }
    }
    event Player_DoMightyUnspin(speed, makeInvinc, entity, value) {
        if (this.Character != Character_MIGHTY)
            return false;

        var playerStatus = this.Status;
        if (playerStatus == this.Player_StatusHurt ||
            playerStatus == this.Player_StatusDead ||
            // playerStatus == this.Player_ ||
            playerStatus == this.Invincibility ||
            playerStatus == this.InvincibilityTimer > 0)
            return false;

        var anim = this.CurrentAnimation;
        if (anim == 10 || anim == 15 || anim == 16) {
            var angle = Math.Atan(this.X - entity.X, this.Y - entity.Y);
            var xspeed = speed * Math.Cos(angle);
            var yspeed = speed * Math.Sin(angle);

            if (anim != 48) {
                this.XSpeed = xspeed;
                this.GroundSpeed = xspeed;
            }
            this.YSpeed = yspeed;

            if (makeInvinc) {
                if (this.Status == this.Player_StatusMighty_HammerDrop) {
                    this.Status = this.Player_StatusJumping;
                    this.AnimationSpeedMult = 1.0;
                    this.SetAnimation(10, 0);
                }

                if (this.CurrentAnimation == 15) {
                    this.AnimationSpeedMult = 1.0;
                    this.SetAnimation(10, 0);
                    if (this.Status == this.Player_StatusSpinDash) {
                        if (this.Ground)
                            this.Status = this.Player_StatusRoll;
                        else
                            this.Status = this.Player_StatusJumping;
                    }
                }
            }
            else {
                this.YSpeed = -4.5;
                if (!this.Flip)
                    this.XSpeed = -2.5;
                else
                    this.XSpeed = 2.5;

                if (this.Underwater) {
                    this.XSpeed *= 0.5;
                    this.YSpeed = -2.25;
                }

                this.InvincibilityTimer = 121;
                this.Visible = 1;

                this.AnimationSpeedMult = 1.0;
                this.SetAnimation(48, 0);
                Sound.Play(this.SFX_MightyUnspin);

                this.Ground = false;
                this.JumpAbility = 0;
                this.MidAirFlag = 0;
                this.Status = this.Player_StatusMighty_UnspinInvincible;
            }

            this.JumpAbility = 0;
            if (value && this.Unk_0x234 < 1) {
                if (this.CurrentAnimation != 48)
                    Sound.Play(this.SFX_PimPom);

                this.Unk_0x234 = 8;
            }
            return true;
        }

        if (makeInvinc != 2 || anim != 4)
            return false;

        if (this.Unk_0x234)
            return true;

        Sound.Play(this.SFX_PimPom);
        this.Unk_0x234 = 30;

        if (entity.X <= this.X)
            this.GroundSpeed = 1.0;
        else
            this.GroundSpeed = -1.0;

        return true;
    }
    event Player_LateAirUpdate() {
        if (this.CameraPtr) {
            this.CameraPtr.SetOnJump = 32.0;
            this.CameraPtr.PlayerInAir = true;
        }

        this.YSpeed += this.GravityRate;
        if (this.YSpeed < this.JumpReleaseSpeed && this.CurrentAnimation == 10 && !this.InputJump && this.JumpAbility == 1) {
            this.YSpeed = this.JumpReleaseSpeed;
            this.XSpeed = this.XSpeed - this.XSpeed / 32.0;
        }

        this.AngleMode = 0;
        this.PushingTimer = 0;

        var amount = Math_PI_DOUBLE * (4.0 / 0x200);
        var rotation = this.Rotation % Math_PI_DOUBLE;
        if (rotation < 0.0 || rotation >= Math_PI)
            this.Rotation += amount;
        else if (rotation > 0.0)
            this.Rotation -= amount;
        if (Math.Abs(rotation) < amount)
            this.Rotation = 0.0;
    }

    event Player_UpdateRotation() {
        if (this.Status == this.Player_Status_Cylinder_OuterVertical ||
            this.Status == this.Player_Status_Cylinder_OuterHorizontal ||
            this.Status == this.Player_Status_Cylinder_OuterHorizontal_Rolling ||
            this.Status == this.Player_Status_Cylinder_MeshTubeExitSide)
            return;

        var rot = this.HexToRadians((this.Angle + 0x10) & 0xE0);
        // Classic rotation
        if (false) {
            this.Rotation = rot;

            if (this.GetAngleMode(this.Angle) == 0 && this.Ground)
                this.Rotation = 0.0;
        }
        // Mania rotation
        else {
            var angle = this.Angle;
            // print "angle: " + angle;
            if (angle <= 0x04 || angle >= 0xFC) {
                if (angle > 0x10 && angle < 0xE8)
                    this.Rotation = this.HexToRadians(angle);
                else
                    this.Rotation = 0.0;
            }
            else {
                rot = this.HexToRadians(angle);
                if (angle <= 0x10 || angle >= 0xE8)
                    rot = 0.0;

                if (Math.Abs(this.GroundSpeed) <= 6.0)
                    this.Rotation += (((rot - this.Rotation + Math_PI_DOUBLE * 1.5) % Math_PI_DOUBLE) - Math_PI) / 4.0;
                else
                    this.Rotation += (((rot - this.Rotation + Math_PI_DOUBLE * 1.5) % Math_PI_DOUBLE) - Math_PI) / 2.0;
            }
        }

        if (this.CurrentAnimation == 10)
            this.Rotation = 0.0;
    }

    event Player_ResetSpeeds() {
        var gravity;
        var isUnderwater = this.Underwater;
        var speedShoesTimer = this.SpeedShoesTimer;

        var speedArray = this.SpeedsArray[this.Character];

        if (isUnderwater) {
            gravity = 0.125;
            if (speedShoesTimer >= 0)
                gravity = 0.0625;
        }
        else {
            gravity = 0.34375;
            if (speedShoesTimer >= 0)
                gravity = 0.21875;
        }
        this.GravityRate = gravity;

        var isSuper = this.SuperForm == SuperState_Super;
        var frictionMult = 1.0;
        if (isSuper) {
            frictionMult = 0.25;
        }
        if (speedShoesTimer > 0) {
            frictionMult = 0.5;
        }
        // Custom: I don't want Speed Shoes /slowing/ down Super Forms
        if (isSuper) {
            frictionMult = 0.25;
        }

        this.TopSpeed         = speedArray[0];
        this.Acceleration     = speedArray[1];
    	this.Friction         = speedArray[1] * frictionMult;
    	this.AirAcceleration  = speedArray[2];
        this.Unk_0x158        = speedArray[3];
        this.Slope            = 0.125;
    	this.SlopeRollUp      = 0.078125;
    	this.SlopeRollDown    = 0.3125;
    	this.Deceleration     = speedArray[4];
        this.RollFriction     = speedArray[5];
        this.JumpHeight       = speedArray[6];
        this.JumpReleaseSpeed = speedArray[7];
        this.RollDeceleration = 0.125;

        if (speedShoesTimer > 0 && !isSuper) {
            this.TopSpeed *= 2.0;
            this.Acceleration *= 2.0;
            this.AirAcceleration *= 2.0;
            this.RollFriction *= 2.0;
        }

        if (isUnderwater) {
            this.TopSpeed *= 0.5;
            this.Acceleration *= 0.5;
            this.Friction *= 0.5;
            this.AirAcceleration *= 0.5;
            this.Deceleration *= 0.5;
            // this.RollFriction *= 0.5;
        }
        if (isSuper) {
            this.TopSpeed *= 2.0;
            this.Acceleration *= 2.0;
            this.Friction *= 2.0;
            this.AirAcceleration *= 4.0;
            // this.Deceleration *= 0.5;
            this.RollFriction *= 0.5;
        }

        if (speedShoesTimer < 0) {
            this.TopSpeed *= 0.5;
            this.Acceleration *= 0.5;
            this.AirAcceleration *= 0.5;
            this.Deceleration *= 0.5;
            this.RollFriction *= 0.5;
            this.Unk_0x158 *= 0.5;
        }

        if (this.UseChibiSprite) {
            this.TopSpeed -= this.TopSpeed / 8.0;
            this.Acceleration -= this.Acceleration / 16.0;
            this.AirAcceleration -= this.AirAcceleration / 16.0;
            this.JumpHeight -= this.JumpHeight / 8.0;
            this.JumpReleaseSpeed -= this.JumpReleaseSpeed / 8.0;
        }
    }

    event UpdateHitbox(index) {
        // if (this.StaticHitbox) {
        //
        // }
        // else {
            this.GetHitboxFromSprite(this.Sprite, this.CurrentAnimation, this.CurrentFrame, index);
        // }
    }

    // Entity
    // Move all of these to C++
    event CheckLeftWall(x, y) {
        // -1.0, 0.0
        // -this.FloorDirection_Y, -this.FloorDirection_X
        if (this.WallSensor_Collided = Static.SenseTileCollision(this, x, y, CollideSide_RIGHT, -this.FloorDirection_Y, -this.FloorDirection_X, -8.0, 1.0, this.PlaneIndex)) {
            this.WallSensor_X = Math.Floor(this.STC_X);
            this.WallSensor_Y = this.STC_Y;
            // this.WallSensor_Angle = this.STC_Angle;
            this.WallSensor_Length = this.STC_Length;
        }
        return this.WallSensor_Collided;
    }
    event CheckRightWall(x, y) {
        // Setting the end thing to 0.0 seems to make this work in air
        // 1.0, 0.0
        // this.FloorDirection_Y, this.FloorDirection_X
        if (this.WallSensor_Collided = Static.SenseTileCollision(this, x, y, CollideSide_LEFT, this.FloorDirection_Y, this.FloorDirection_X, -8.0, 1.0, this.PlaneIndex)) {
            this.WallSensor_X = Math.Floor(this.STC_X);
            this.WallSensor_Y = this.STC_Y;
            // this.WallSensor_Angle = this.STC_Angle;
            this.WallSensor_Length = this.STC_Length;
        }
        return this.WallSensor_Collided;
    }
    event CheckLeftWall_OmniDir(x, y, angleMode) {
        var length = 14.0;
        angleMode = (angleMode + 3) & 3;
        this.WallSensor_Collided = false;
        switch (angleMode) {
            // Checking below
            case 0:
                if (Static.SenseTileCollision(this, x, y, CollideSide_TOP, 0.0, 1.0, -16.0, 16.0, this.PlaneIndex)) {
                    if (this.STC_Length >= -length && this.STC_Length < 0.0) {
                        this.WallSensor_X = Math.Floor(this.STC_X);
                        this.WallSensor_Y = Math.Floor(this.STC_Y);
                        this.WallSensor_Length = this.STC_Length;
                        this.WallSensor_Collided = true;
                        return true;
                    }
                }
                return false;
            // Checking to right
            case 1:
                if (Static.SenseTileCollision(this, x, y, CollideSide_LEFT, 1.0, 0.0, -16.0, 16.0, this.PlaneIndex)) {
                    if (this.STC_Length >= -length && this.STC_Length <= 0.0) {
                        this.WallSensor_X = Math.Floor(this.STC_X);
                        this.WallSensor_Y = Math.Floor(this.STC_Y);
                        this.WallSensor_Length = this.STC_Length;
                        this.WallSensor_Collided = true;
                        return true;
                    }
                }
                return false;
            // Checking above
            case 2:
                if (Static.SenseTileCollision(this, x, y, CollideSide_BOTTOM, 0.0, -1.0, -16.0, 16.0, this.PlaneIndex)) {
                    if (this.STC_Length >= -length && this.STC_Length < 0.0) {
                        this.WallSensor_X = Math.Floor(this.STC_X);
                        this.WallSensor_Y = Math.Floor(this.STC_Y);
                        this.WallSensor_Length = this.STC_Length;
                        this.WallSensor_Collided = true;
                        return true;
                    }
                }
                return false;
            // Checking to left
            case 3:
                if (Static.SenseTileCollision(this, x, y, CollideSide_RIGHT, -1.0, 0.0, -16.0, 16.0, this.PlaneIndex)) {
                    if (this.STC_Length >= -length && this.STC_Length <= 0.0) {
                        this.WallSensor_X = Math.Floor(this.STC_X);
                        this.WallSensor_Y = Math.Floor(this.STC_Y);
                        this.WallSensor_Length = this.STC_Length;
                        this.WallSensor_Collided = true;
                        return true;
                    }
                }
                return false;
        }
        return false;
    }
    event CheckRightWall_OmniDir(x, y, angleMode) {
        var length = 14.0;
        angleMode = (angleMode + 1) & 3;
        this.WallSensor_Collided = false;
        switch (angleMode) {
            // Checking below
            case 0:
                if (Static.SenseTileCollision(this, x, y, CollideSide_TOP, 0.0, 1.0, -16.0, 16.0, this.PlaneIndex)) {
                    if (this.STC_Length >= -length && this.STC_Length < 0.0) {
                        this.WallSensor_X = Math.Floor(this.STC_X);
                        this.WallSensor_Y = Math.Floor(this.STC_Y);
                        this.WallSensor_Length = this.STC_Length;
                        this.WallSensor_Collided = true;
                        return true;
                    }
                }
                return false;
            // Checking to right
            case 1:
                if (Static.SenseTileCollision(this, x, y, CollideSide_LEFT, 1.0, 0.0, -16.0, 16.0, this.PlaneIndex)) {
                    if (this.STC_Length >= -length && this.STC_Length <= 0.0) {
                        this.WallSensor_X = Math.Floor(this.STC_X);
                        this.WallSensor_Y = Math.Floor(this.STC_Y);
                        this.WallSensor_Length = this.STC_Length;
                        this.WallSensor_Collided = true;
                        return true;
                    }
                }
                return false;
            // Checking above
            case 2:
                if (Static.SenseTileCollision(this, x, y, CollideSide_BOTTOM, 0.0, -1.0, -16.0, 16.0, this.PlaneIndex)) {
                    if (this.STC_Length >= -length && this.STC_Length < 0.0) {
                        this.WallSensor_X = Math.Floor(this.STC_X);
                        this.WallSensor_Y = Math.Floor(this.STC_Y);
                        this.WallSensor_Length = this.STC_Length;
                        this.WallSensor_Collided = true;
                        return true;
                    }
                }
                return false;
            // Checking to left
            case 3:
                if (Static.SenseTileCollision(this, x, y, CollideSide_RIGHT, -1.0, 0.0, -16.0, 16.0, this.PlaneIndex)) {
                    if (this.STC_Length >= -length && this.STC_Length <= 0.0) {
                        this.WallSensor_X = Math.Floor(this.STC_X);
                        this.WallSensor_Y = Math.Floor(this.STC_Y);
                        this.WallSensor_Length = this.STC_Length;
                        this.WallSensor_Collided = true;
                        return true;
                    }
                }
                return false;
        }
        return false;
    }
    event CheckCeilLeftSensor(x, y) {
        if (this.LeftCeilSensor_Collided = Static.SenseTileCollision(this, x, y, this.FloorSensor_Side ^ 5, this.FloorDirection_X, -this.FloorDirection_Y, -10.0, 0.0, this.PlaneIndex)) {
            this.LeftCeilSensor_X = this.STC_X;
            this.LeftCeilSensor_Y = this.STC_Y;
            this.LeftCeilSensor_Angle = this.STC_Angle;
            this.LeftCeilSensor_Length = this.STC_Length;
        }
        return this.LeftCeilSensor_Collided;
    }
    event CheckCeilRightSensor(x, y) {
        if (this.RightCeilSensor_Collided = Static.SenseTileCollision(this, x, y, this.FloorSensor_Side ^ 5, this.FloorDirection_X, -this.FloorDirection_Y, -10.0, 0.0, this.PlaneIndex)) {
            this.RightCeilSensor_X = this.STC_X;
            this.RightCeilSensor_Y = this.STC_Y;
            this.RightCeilSensor_Angle = this.STC_Angle;
            this.RightCeilSensor_Length = this.STC_Length;
        }
        return this.RightCeilSensor_Collided;
    }
    event CheckFloorLeftSensor(x, y, initialAngle) {
        if (this.LeftSensor_Collided = Static.SenseTileCollision(this, x, y, 0x10 | this.FloorSensor_Side, this.FloorDirection_X, this.FloorDirection_Y, -14.0, this.MaxTileCollision, this.PlaneIndex)) {
            if (initialAngle != -1 &&
                Math.Abs(((initialAngle - this.STC_Angle + 0x80) & 0xFF) - 0x80) > 0x20) {
                return this.LeftSensor_Collided = false;
            }
            if (this.STC_Length <= -14.0)
                return this.LeftSensor_Collided = false;
            this.LeftSensor_X = this.STC_X;
            this.LeftSensor_Y = this.STC_Y;
            this.LeftSensor_Angle = this.STC_Angle;
            this.LeftSensor_Length = this.STC_Length;
        }
        return this.LeftSensor_Collided;
    }
    event CheckFloorMiddleSensor(x, y, initialAngle) {
        if (this.MiddleSensor_Collided = Static.SenseTileCollision(this, x, y, 0x10 | this.FloorSensor_Side, this.FloorDirection_X, this.FloorDirection_Y, -14.0, this.MaxTileCollision, this.PlaneIndex)) {
            if (initialAngle != -1 &&
                Math.Abs(((initialAngle - this.STC_Angle + 0x80) & 0xFF) - 0x80) > 0x20) {
                return this.MiddleSensor_Collided = false;
            }
            if (this.STC_Length <= -14.0)
                return this.MiddleSensor_Collided = false;
            this.MiddleSensor_X = this.STC_X;
            this.MiddleSensor_Y = this.STC_Y;
            this.MiddleSensor_Angle = this.STC_Angle;
            this.MiddleSensor_Length = this.STC_Length;
        }
        return this.MiddleSensor_Collided;
    }
    event CheckFloorRightSensor(x, y, initialAngle) {
        if (this.RightSensor_Collided = Static.SenseTileCollision(this, x, y, 0x10 | this.FloorSensor_Side, this.FloorDirection_X, this.FloorDirection_Y, -14.0, this.MaxTileCollision, this.PlaneIndex)) {
            if (initialAngle != -1 &&
                Math.Abs(((initialAngle - this.STC_Angle + 0x80) & 0xFF) - 0x80) > 0x20) {
                return this.RightSensor_Collided = false;
            }
            if (this.STC_Length <= -14.0)
                return this.RightSensor_Collided = false;
            this.RightSensor_X = this.STC_X;
            this.RightSensor_Y = this.STC_Y;
            this.RightSensor_Angle = this.STC_Angle;
            this.RightSensor_Length = this.STC_Length;
        }
        return this.RightSensor_Collided;
    }
    event InitGroundSensors(initialX, initialY, initialAngle, angleMode) {
        var floor_sensor_cos = this.SensorABCD_Ground_cos;
        var floor_sensor_sin = this.SensorABCD_Ground_sin;
        var wall_sensor_cos = this.SensorEF_cos;
        var wall_sensor_sin = this.SensorEF_sin;
        var simple_cos = this.simple_cos;
        var simple_sin = this.simple_sin;
        var simple_side = this.simple_side;

        this.FloorDirection_X = simple_sin[angleMode];
        this.FloorDirection_Y = simple_cos[angleMode];
        this.FloorSensor_Side = simple_side[angleMode];

        var wall_x = initialX;
        var wall_y = initialY + this.CheckCenterOffY;
        // 1 | 3
        if (angleMode & 1)
            wall_y = initialY;

        var foot_x = initialX + (this.HitboxH * 0.5 + this.HitboxOffY) * this.FloorDirection_X;
        var foot_y = initialY + (this.HitboxH * 0.5 + this.HitboxOffY) * this.FloorDirection_Y;
        this.LeftSensor_X = foot_x - floor_sensor_cos[angleMode];
        this.LeftSensor_Y = foot_y - floor_sensor_sin[angleMode];
        this.RightSensor_X = foot_x + floor_sensor_cos[angleMode];
        this.RightSensor_Y = foot_y + floor_sensor_sin[angleMode];
        this.MiddleSensor_X = foot_x;
        this.MiddleSensor_Y = foot_y;
        if (this.GroundSpeed <= 0.0) {
            this.WallSensor_X = wall_x - wall_sensor_cos[angleMode] - 1.0;
            this.WallSensor_Y = wall_y - wall_sensor_sin[angleMode];
        }
        else {
            this.WallSensor_X = wall_x + wall_sensor_cos[angleMode];
            this.WallSensor_Y = wall_y + wall_sensor_sin[angleMode];
        }
        this.LeftSensor_Angle =
            this.RightSensor_Angle =
            this.MiddleSensor_Angle = initialAngle;
        this.LeftSensor_Length =
            this.RightSensor_Length =
            this.MiddleSensor_Length = 0;
        this.LeftSensor_Collided =
            this.RightSensor_Collided =
            this.MiddleSensor_Collided =
            this.WallSensor_Collided = false;
    }
    event InitAirSensors(initialX, initialY) {
        var floor_sensor_cos = this.SensorEF_cos; // this.SensorABCD_Air_cos;
        var floor_sensor_sin = this.SensorEF_sin; // this.SensorABCD_Air_sin;
        var wall_sensor_cos = this.SensorEF_cos;
        var wall_sensor_sin = this.SensorEF_sin;
        var simple_cos = this.simple_cos;
        var simple_sin = this.simple_sin;
        var simple_side = this.simple_side;

        this.FloorDirection_X = 0.0;
        this.FloorDirection_Y = 1.0;
        this.FloorSensor_Side = CollideSide_TOP;

        var wall_x = initialX;
        var wall_y = initialY + this.CheckCenterOffY;
        var foot_x = initialX;
        var foot_y = initialY + (this.HitboxH * 0.5 + this.HitboxOffY);
        var head_x = initialX;
        var head_y = initialY - (this.HitboxH * 0.5 + this.HitboxOffY) - 1.0;

        // Moving right
        if (this.XSpeed >= 0.0) {
            this.WallSensor_X = wall_x + wall_sensor_cos[0];
            this.WallSensor_Y = wall_y;
        }
        // Moving left
        if (this.XSpeed <= 0.0) {
            this.WallSensor_X = wall_x - wall_sensor_cos[0] - 1.0;
            this.WallSensor_Y = wall_y;
        }

        // Moving down
        this.LeftSensor_X = foot_x - floor_sensor_cos[0] + 1;
        this.LeftSensor_Y = foot_y;
        this.RightSensor_X = foot_x + floor_sensor_cos[0] - 2;
        this.RightSensor_Y = foot_y;

        this.LeftCeilSensor_X = head_x - floor_sensor_cos[0] + 1;
        this.LeftCeilSensor_Y = head_y;
        this.RightCeilSensor_X = head_x + floor_sensor_cos[0] - 2;
        this.RightCeilSensor_Y = head_y;

        this.LeftSensor_Angle =
            this.RightSensor_Angle =
            this.LeftCeilSensor_Angle =
            this.RightCeilSensor_Angle = 0;
        this.LeftSensor_Collided =
            this.RightSensor_Collided =
            this.LeftCeilSensor_Collided =
            this.RightCeilSensor_Collided =
            this.WallSensor_Collided = false;
    }
    event Entity_GroundMovement() {
        // NOTE: More parts = more precision & more CPU usage
        //    Mania uses 4.0, we will use 4.0 until otherwise.
        var parts = 4.0;

        var groundSpeed = Math.Abs(this.GroundSpeed);
        var speedPart = Math.Floor(groundSpeed / parts);
        var speedFraction = groundSpeed - speedPart * parts;
        var speedPartRemain = speedFraction;

        var angle, angleMode, gsp, cos, sin, deltaX, deltaY;

        var initialX = this.X;
        var initialY = this.Y;
        var initialAngle = this.Angle;

        var wall_sensor_cos = this.SensorEF_cos;
        var wall_sensor_sin = this.SensorEF_sin;

        var sensorsAngle = this.sensorsAngle;
        var sensorsLength = this.sensorsLength;
        var sensorsCollided = this.sensorsCollided;

        gsp = this.GroundSpeed;

        this.InitGroundSensors(initialX, initialY, initialAngle, this.AngleMode);

        var count = 0;
        while (speedPartRemain >= 0.0) {
            angle = this.Angle;
            angleMode = this.AngleMode;
            cos = Static.HexCos(angle);
            sin = Static.HexSin(angle);
            if (speedPart > 0.0) {
                deltaX = cos * parts;
                deltaY = sin * parts;
                speedPartRemain = speedPart - 1.0;
            }
            else {
                deltaX = speedFraction * cos;
                deltaY = speedFraction * sin;
                speedPartRemain = -1.0;
            }

            if (gsp < 0.0) {
                deltaX = -deltaX;
                deltaY = -deltaY;
            }

            // if (!this.WallSensor_Collided)
            this.InitGroundSensors(initialX, initialY, initialAngle, angleMode);

            initialX += deltaX;
            initialY += deltaY;

            // TODO: Fix
            // Check Walls here
            if (gsp <= 0) {
                // CheckLeftWall, max left 0xE past hitbox
                // if (angleMode == 0) if (this.CheckLeftWall(this.WallSensor_X, this.WallSensor_Y)) {
                if (this.CheckLeftWall_OmniDir(this.WallSensor_X, this.WallSensor_Y, angleMode)) {
                    speedPartRemain = -1;
                    if (!(angleMode & 1))
                        deltaX = 0.0;
                    else
                        deltaY = 0.0;
                    if (angleMode == 0)
                        this.LeftSensor_X = this.WallSensor_X + 2.0;
                }
            }
            else {
                // CheckRightWall
                // if (angleMode == 0) if (this.CheckRightWall(this.WallSensor_X, this.WallSensor_Y)) {
                if (this.CheckRightWall_OmniDir(this.WallSensor_X, this.WallSensor_Y, angleMode)) {
                    speedPartRemain = -1;
                    if (!(angleMode & 1))
                        deltaX = 0.0;
                    else
                        deltaY = 0.0;
                    if (angleMode == 0)
                        this.RightSensor_X = this.WallSensor_X - 2.0;
                }
            }

            // Check Floor here
            this.LeftSensor_X += deltaX;
            this.MiddleSensor_X += deltaX;
            this.RightSensor_X += deltaX;
            this.LeftSensor_Y += deltaY;
            this.MiddleSensor_Y += deltaY;
            this.RightSensor_Y += deltaY;
            this.CheckFloorLeftSensor(this.LeftSensor_X, this.LeftSensor_Y, initialAngle);
            this.CheckFloorMiddleSensor(this.MiddleSensor_X, this.MiddleSensor_Y, initialAngle);
            this.CheckFloorRightSensor(this.RightSensor_X, this.RightSensor_Y, initialAngle);

            // Determine sensor to use
            var highestSensor = -1;
            sensorsAngle[0] = this.LeftSensor_Angle;
            sensorsAngle[1] = this.MiddleSensor_Angle;
            sensorsAngle[2] = this.RightSensor_Angle;
            sensorsLength[0] = this.LeftSensor_Length;
            sensorsLength[1] = this.MiddleSensor_Length;
            sensorsLength[2] = this.RightSensor_Length;
            sensorsCollided[0] = this.LeftSensor_Collided;
            sensorsCollided[1] = this.MiddleSensor_Collided;
            sensorsCollided[2] = this.RightSensor_Collided;

            // Get highest sensor
            for (var i = 0; i < 3; i++) {
                if (highestSensor == -1) {
                    if (sensorsCollided[i])
                        highestSensor = i;
                }
                else if (sensorsCollided[i]) {
                    var currentLen = sensorsLength[i];
                    var highestLen = sensorsLength[highestSensor];

                    // if (angleMode != 0) {
                    //     print "sensorsAngle["+i+"]: " + sensorsAngle[i];
                    //     print "sensorsLength["+i+"]: " + sensorsLength[i];
                    // }

                    if (currentLen < highestLen) {
                        highestSensor = i;
                    }
                    else if (currentLen == highestLen) {
                        var currentAngle = sensorsAngle[i];
                        if (angleMode == 0) {
                            if (currentAngle < 0x08 || currentAngle > 0xF8)
                                highestSensor = i;
                        }
                        else {
                            highestSensor = i;
                        }
                    }
                }
            }

            // Set future positions
            var finalAngle = -1;
            if (highestSensor == -1) {
                finalAngle = initialAngle;
                speedPartRemain = -1;
            }
            else {
                finalAngle = sensorsAngle[highestSensor];
                initialX += sensorsLength[highestSensor] * this.FloorDirection_X;
                initialY += sensorsLength[highestSensor] * this.FloorDirection_Y;
            }

            // Change AngleMode
            // For some reason the AngleMode used in Mania and 3K is so different
            // if (3KBased) this.AngleMode = this.GetAngleMode(this.Angle ^ 0xFF) >> 6;
            // var lastAngleMode = this.AngleMode;
            if (this.AngleMode == 0) { // 0x00 +/- 0x22
                if (((finalAngle + 0x7F) & 0xFF) <= 0x5C)
                    this.AngleMode = 1;
                if (((finalAngle - 0x23 + 0x100) & 0xFF) <= 0x5C)
                    this.AngleMode = 3;
            }
            else if (this.AngleMode == 1) { // 0xC0 +/- 0x22
                if (finalAngle > 0xE2)
                    this.AngleMode = 0;
                if (finalAngle < 0x9E)
                    this.AngleMode = 2;
            }
            else if (this.AngleMode == 2) { // 0x80 +/- 0x22
                if (finalAngle > 0xA2)
                    this.AngleMode = 1;
                if (finalAngle < 0x5E)
                    this.AngleMode = 3;
            }
            else if (this.AngleMode == 3) { // 0x40 +/- 0x22
                if (finalAngle > 0x62)
                    this.AngleMode = 2;
                if (finalAngle < 0x1E)
                    this.AngleMode = 0;
            }

            // if (this.AngleMode != lastAngleMode) {
            //     print "this.AngleMode: " + lastAngleMode + " -> " + this.AngleMode;
            // }

            if (this.WallSensor_Collided)
                break;

            // if (highestSensor != -1) {
                this.Angle = finalAngle;
            // }

            speedPart = speedPartRemain;
        }

        // On floor?
        if (this.LeftSensor_Collided || this.MiddleSensor_Collided || this.RightSensor_Collided) {
            if (this.WallSensor_Collided) {
                // TODO: Make these AngleMode agnostic
                if (gsp < 0.0) {
                    this.X = this.WallSensor_X + wall_sensor_cos[angleMode] + 1.0;
                    this.Y = initialY;
                    this.XSpeed = 0.0;
                    this.GroundSpeed = 0.0;
                }
                else if (gsp > 0.0) {
                    this.X = this.WallSensor_X - wall_sensor_cos[angleMode];
                    this.Y = initialY;
                    this.XSpeed = 0.0;
                    this.GroundSpeed = 0.0;
                }
                else {
                    this.Y = initialY;
                    this.XSpeed = 0.0;
                    this.GroundSpeed = 0.0;
                }
            }
            else {
                this.X = initialX;
                this.Y = initialY;
            }
        }
        // Not on floor
        else {
            this.Ground = false;

            this.XSpeed = this.GroundSpeed * Static.HexCos(this.Angle);
            this.YSpeed = this.GroundSpeed * Static.HexSin(this.Angle);

            this.YSpeed = Math.Clamp(this.YSpeed, -16.0, 16.0);

            this.GroundSpeed = this.XSpeed;
            this.Angle = 0;
            this.AngleMode = 0;
            if (this.WallSensor_Collided) {
                if (this.XSpeed < 0.0) {
                    this.X = this.WallSensor_X + wall_sensor_cos[angleMode] + 1.0;
                    this.Y += this.YSpeed;
                    this.XSpeed = 0.0;
                    this.GroundSpeed = 0.0;
                }
                else if (this.XSpeed > 0.0) {
                    this.X = this.WallSensor_X - wall_sensor_cos[angleMode];
                    this.Y += this.YSpeed;
                    this.XSpeed = 0.0;
                    this.GroundSpeed = 0.0;
                }
                else {
                    this.Y += this.YSpeed;
                    this.XSpeed = 0.0;
                    this.GroundSpeed = 0.0;
                }
            }
            else {
                this.X += this.XSpeed;
                this.Y += this.YSpeed;
            }
        }
    }
    event Entity_AirMovement() {
        var movingUp = false;
        var movingDown = false;
        var movingLeft = false;
        var movingRight = false;

        var xspeed = this.XSpeed;
        var yspeed = this.YSpeed;

        // NOTE: This is a custom addition
        this.Angle = 0;
        this.AngleMode = 0;
        // this.HitboxHalfH = 15.0;

        // Determine if moving right
        if (xspeed >= 0.0) {
            movingRight = true;
        }
        if (xspeed <= 0.0) {
            movingLeft = true;
        }
        if (yspeed >= 0.0) {
            movingDown = true;
        }
        if (Math.Abs(xspeed) > 1.0 || yspeed <= 0.0) {
            movingUp = true;
        }

        // var doSensor;
        var absXSpeed = Math.Abs(xspeed);
        var absYSpeed = Math.Abs(yspeed);
        var absMaxSpeed = Math.Max(absXSpeed, absYSpeed);
        var speedDivisor = ((Number.AsInteger(absMaxSpeed) << 16) >> this.SpeedPartitionValue) + 1.0;
        var xspeedPart = xspeed / speedDivisor;
        var yspeedPart = yspeed / speedDivisor;
        var xspeedFraction = xspeed - xspeedPart * (speedDivisor - 1.0);
        var yspeedFraction = yspeed - yspeedPart * (speedDivisor - 1.0);

        var originalXSpeed = this.XSpeed;

        var speedPartRemain, deltaX, deltaY;
        if (speedDivisor > 0) {
            deltaX = deltaY = 0.0;
            while (true) {
                if (speedDivisor >= 2.0) {
                    deltaX += xspeedPart;
                    deltaY += yspeedPart;
                }
                else {
                    deltaX += xspeedFraction;
                    deltaY += yspeedFraction;
                }
                speedPartRemain = speedDivisor - 1.0;

                this.InitAirSensors(this.X + deltaX, this.Y + deltaY);

                // print "Y: " + (this.Y + deltaY);
                // print "this.LeftSensor_Y: " + this.LeftSensor_Y;
                // print "distance: " + (this.LeftSensor_Y - (this.Y + deltaY));

                // Check for right wall collision
                if (movingRight == 1) {
                    if (this.CheckRightWall(this.WallSensor_X, this.WallSensor_Y)) {
                        movingRight = 2;
                    }
                    else if (this.XSpeed < 2.0 && this.CheckCenterOffY > 0.0) {
                        if (this.CheckRightWall(this.WallSensor_X, this.WallSensor_Y - 2.0 * this.CheckCenterOffY))
                            movingRight = 2;
                    }
                }

                // Check for left wall collision
                if (movingLeft == 1) {
                    if (this.CheckLeftWall(this.WallSensor_X, this.WallSensor_Y)) {
                        movingLeft = 2;
                    }
                    else if (this.XSpeed > -2.0 && this.CheckCenterOffY > 0.0) {
                        if (this.CheckLeftWall(this.WallSensor_X, this.WallSensor_Y - 2.0 * this.CheckCenterOffY))
                            movingLeft = 2;
                    }
                }

                // If there was a right wall collision
                if (movingRight == 2) {
                    this.XSpeed = 0.0;
                    this.GroundSpeed = 0.0;
                    this.X = this.WallSensor_X - this.SensorEF_cos[0];
                    this.LeftSensor_X = this.LeftCeilSensor_X = this.X - this.SensorEF_cos[0] + 1.0;
                    this.RightSensor_X = this.RightCeilSensor_X = this.X + this.SensorEF_cos[0] - 2.0;
                    // print "right wall (x: " + this.X + " wx: " + this.WallSensor_X + " ef: " + this.SensorEF_cos[0] + " rx: " + this.RightSensor_X + ")";
                    movingRight = 3;
                    speedPartRemain = 0.0;
                }

                // If there was a left wall collision
                if (movingLeft == 2) {
                    this.XSpeed = 0.0;
                    this.GroundSpeed = 0.0;
                    this.X = this.WallSensor_X + this.SensorEF_cos[0] + 1.0;
                    this.LeftSensor_X = this.LeftCeilSensor_X = this.X - this.SensorEF_cos[0] + 1.0;
                    this.RightSensor_X = this.RightCeilSensor_X = this.X + this.SensorEF_cos[0] - 2.0;
                    movingLeft = 3;
                    speedPartRemain = 0.0;
                }

                // If moving down
                if (movingDown == 1) {
                    var gh = this.MaxTileCollision;

                    this.MaxTileCollision = 0.0;

                    var ls = this.LeftSensor_Y;
                    var rs = this.RightSensor_Y;

                    if (this.CheckFloorLeftSensor(this.LeftSensor_X, this.LeftSensor_Y, -1)) {
                        movingDown = 2;
                        speedPartRemain = 0;

                        // print "left side collision (x: " + this.LeftSensor_X + ", y: " + this.LeftSensor_Y + ", ang: " + Number.ToString(this.LeftSensor_Angle, 16) + ")";
                    }
                    if (this.CheckFloorRightSensor(this.RightSensor_X, this.RightSensor_Y, -1)) {
                        movingDown = 2;
                        speedPartRemain = 0;

                        // print "right side collision (x: " + this.RightSensor_X + ", y: " + this.RightSensor_Y + ", ang: " + Number.ToString(this.RightSensor_Angle, 16) + ")";
                    }

                    this.MaxTileCollision = gh;
                }

                // If moving up
                if (movingUp == 1) {
                    if (this.CheckCeilLeftSensor(this.LeftCeilSensor_X, this.LeftCeilSensor_Y)) {
                        movingUp = 2;
                        speedPartRemain = 0;
                    }
                    if (this.CheckCeilRightSensor(this.RightCeilSensor_X, this.RightCeilSensor_Y)) {
                        movingUp = 2;
                        speedPartRemain = 0;
                    }
                }

                speedDivisor = speedPartRemain;
                if (speedPartRemain <= 0.0)
                    break;
            }
        }

        if (movingLeft == 3) {
            // print "hit left movingDown: " + movingDown +
            //     " xspeed: " + xspeed +
            //     " yspeed: " + yspeed;
        }

        // If no collisions, just move
        if (movingRight < 2 && movingLeft < 2) {
            this.X += this.XSpeed;
        }
        if (movingDown < 2 && movingUp < 2) {
            this.Y += this.YSpeed;
            return;
        }

        // If moving down and collided
        if (movingDown == 2) {
            this.Ground = true;

            var doSensor;
            if (this.LeftSensor_Collided && this.RightSensor_Collided)
                doSensor = this.LeftSensor_Length < this.RightSensor_Length ? -1 : 1;
            else if (this.LeftSensor_Collided && !this.RightSensor_Collided)
                doSensor = -1;
            else
                doSensor = 1;

            if (doSensor == -1) {
                if (movingLeft == 3 || movingRight == 3)
                    this.XSpeed = originalXSpeed;
                this.Y = this.LeftSensor_Y - (this.HitboxH * 0.5 + this.HitboxOffY);
                this.Angle = this.LeftSensor_Angle;
                this.Entity_AirMovementDownwards_Angles();
            }
            else if (doSensor == 1) {
                if (movingLeft == 3 || movingRight == 3)
                    this.XSpeed = originalXSpeed;
                this.Y = this.RightSensor_Y - (this.HitboxH * 0.5 + this.HitboxOffY);
                this.Angle = this.RightSensor_Angle;
                this.Entity_AirMovementDownwards_Angles();
            }
        }

        // If moving up and collided
        if (movingUp == 2) {
            var doSensor;
            if (this.LeftCeilSensor_Collided && this.RightCeilSensor_Collided)
                doSensor = this.LeftCeilSensor_Length < this.RightCeilSensor_Length ? -1 : 1;
            else if (this.LeftCeilSensor_Collided && !this.RightCeilSensor_Collided)
                doSensor = -1;
            else
                doSensor = 1;

            if (doSensor == -1) {
                // if (movingLeft == 3 || movingRight == 3)
                //     this.XSpeed = originalXSpeed;

                this.Y = this.LeftCeilSensor_Y + (this.HitboxH * 0.5 + this.HitboxOffY) + 1.0;
                if (this.YSpeed >= 0.0 && this.YSpeed < 1.0)
                    this.Y++;
                this.Entity_AirMovementUpwards_Angles(this.LeftCeilSensor_Angle);
            }
            else if (doSensor == 1) {
                // if (movingLeft == 3 || movingRight == 3)
                //     this.XSpeed = originalXSpeed;

                this.Y = this.RightCeilSensor_Y + (this.HitboxH * 0.5 + this.HitboxOffY) + 1.0;
                if (this.YSpeed >= 0.0 && this.YSpeed < 1.0)
                    this.Y++;
                this.Entity_AirMovementUpwards_Angles(this.RightCeilSensor_Angle);
            }
        }
    }
    event Entity_AirMovementDownwards_Angles() {
        var angle = this.Angle;
        var angleMode = this.AngleMode;
        // Setting angle modes
        if (angle > 0xA0 && angle < 0xDE && angleMode != 1) {
            this.X -= 4.0;
            this.AngleMode = 1;
        }
        if (angle > 0x22 && angle < 0x60 && angleMode != 3) {
            this.X += 4.0;
            this.AngleMode = 3;
        }

        //
        var xspeed = this.XSpeed;
        var yspeed = this.YSpeed;

        // print "xspeed: " + xspeed;

        var gspeed = xspeed;
        var absXSpeed = Math.Abs(xspeed);
        var absYSpeed = Math.Abs(yspeed);
        var absYSpeedHalf = absYSpeed * 0.5;
        var sign = Math.Sign(Static.HexSin(angle));
        if (angle >= 0x80) {
            // Full Steep
            if (angle <= 0xE0) {
                if (absXSpeed <= absYSpeed)
                    gspeed = -yspeed;
            }
            // Half Steep
            else if (angle <= 0xF0) {
                if (absXSpeed <= absYSpeedHalf)
                    gspeed = -yspeed * 0.5;
            }
            // Shallow
            else {
                gspeed = xspeed;
            }
        }
        else {
            // Full Steep
            if (angle >= 0x20) {
                if (absXSpeed <= absYSpeed)
                    gspeed = yspeed;
            }
            // Half Steep
            else if (angle >= 0x10) {
                if (absXSpeed <= absYSpeedHalf)
                    gspeed = yspeed * 0.5;
            }
            // Shallow
            else {
                gspeed = xspeed;
            }
        }

        // print "angle: " + angle;
        // print "gspeed: " + gspeed;

        // Clamp Speeds
        this.GroundSpeed = gspeed;
        this.XSpeed = gspeed;
        this.YSpeed = 0.0;
    }
    event Entity_AirMovementUpwards_Angles(angle) {
        var xspeed = this.XSpeed;
        var yspeed = this.YSpeed;

        var gspeed = xspeed;
        var absXSpeed = Math.Abs(xspeed);
        var absYSpeed = Math.Abs(yspeed);

        // Upward Slope (Right)
        if (angle >= 0x9F && angle <= 0xC0) {
            if (yspeed < -absXSpeed) {
                this.X -= 4.0;
                this.Y -= 2.0;
                this.Ground = true;
                this.Angle = angle;
                this.AngleMode = 1;

                gspeed = -yspeed;
                if (angle <= 0x9F)
                    gspeed *= 0.5;

                this.GroundSpeed = gspeed;
            }
        }
        // Upward Slope (Left)
        else if (angle >= 0x40 && angle <= 0x61) {
            if (yspeed < -absXSpeed) {
                this.X += 4.0;
                this.Y -= 2.0;
                this.Ground = true;
                this.Angle = angle;
                this.AngleMode = 3;

                gspeed = yspeed;
                if (angle >= 0x61)
                    gspeed *= 0.5;

                this.GroundSpeed = gspeed;
            }
        }

        if (this.YSpeed < 0.0)
            this.YSpeed = 0.0;
    }
    event Entity_ApplyPhysics() {
        // return this.ApplyPhysics();
        if (this.UseGroundSpeed) {
            this.Angle &= 0xFF;

            if (Math.Abs(this.GroundSpeed) >= 6.0)
                this.MaxTileCollision = 15;
            else if (this.Angle != 0)
                this.MaxTileCollision = 15;
            else
                this.MaxTileCollision = 8;

            this.CheckCenterOffY = 0.0;
            if ((this.HitboxH * 0.5 + this.HitboxOffY) >= 14.0) {
                this.CheckCenterOffY = 4.0;
                this.SpeedPartitionValue = 19;
            }
            else {
                this.CheckCenterOffY = 0.0;
                this.SpeedPartitionValue = 17;
                this.MaxTileCollision = 15;
            }

            if (this.Ground)
                this.Entity_GroundMovement();
            else
                this.Entity_AirMovement();

            if (this.Ground) {
                this.XSpeed = this.GroundSpeed * Static.HexCos(this.Angle);
                this.YSpeed = this.GroundSpeed * Static.HexSin(this.Angle);
            }
            else {
                this.GroundSpeed = this.XSpeed;
            }
        }
        else {
            this.X += this.XSpeed;
            this.Y += this.YSpeed;
        }
    }
    event Entity_CanFindTile(a2, sensorMode, planeIndex, x, y, len) {
        var sensor;
        var startX = Math.Floor(this.X + x);
        var startY = Math.Floor(this.Y + y);
        if (sensor = TileCollision.Line(startX, startY, sensorMode, len, planeIndex, this.Angle, this)) {
            return this.SensorCollided;
        }
        return false;
    }

    // Update functions
    event Update() {
        if (!this.CameraPtr && !this.IsSubPlayer) {
            this.CameraPtr = Instance.GetNth("Camera", 0);
            if (this.CameraPtr) {
                this.CameraPtr.PlayerPtr = this;
            }
            else {
                this.CameraPtr = Instance.Create("Camera", this.X, this.Y);
                this.CameraPtr.PlayerPtr = this;
            }
        }

        if (this.SuperForm == SuperState_Super)
            this.Player_HandleSuperForm(0xFF);

        if (this.InputStatus)
            this.InputStatus();

        var camera = this.CameraPtr;
        if (camera) {
            var blockCameraLookTimer = this.CameraLockTimer;
            if (blockCameraLookTimer > 0) {
                this.CameraLockTimer = blockCameraLookTimer - 1;
                if (blockCameraLookTimer == 1)
                    camera.Status = camera.Camera_StatusNormal;
            }
            else {
                var playerStatus = this.Status;
                if (playerStatus != this.Player_StatusLookingUp && playerStatus != this.Player_StatusLookingDown) {
                    var cameraOffY = camera.OffsetY;
                    if (cameraOffY > 0.0) {
                        camera.OffsetY = cameraOffY - 2.0;
                    }
                    if (cameraOffY < 0.0) {
                        camera.OffsetY = cameraOffY + 2.0;
                    }
                }
            }
        }

        var invincibility = this.Invincibility;
        if (invincibility) {
            if (invincibility < 0) {
                this.Invincibility = invincibility + 1;
            }
            else {
                this.Invincibility = invincibility - 1;
                if (invincibility == 1) {
                    //
                }
            }
        }

        var speedshoestimer = this.SpeedShoesTimer;
        if (speedshoestimer > 0) {
            this.SpeedShoesTimer = speedshoestimer - 1;
            if (speedshoestimer == 1) {
                this.Player_ResetSpeeds();
                // Stop music here
            }
        }

        if (Input.IsKeyPressed(Key_U)) {
            // this.Status = this.Player_StatusFrozen_PGZ;
            // var itemBox;
            // with ("ItemBox") {
            //     itemBox = this;
            //     if (itemBox.Hidden) {
            //         itemBox.HitboxOffY = -8.0;
            //         Sound.Play(other.SFX_ShieldAction_Bubble);
            //
            //         itemBox.YSpeed = -5.0;
            //         itemBox.Hidden = false;
            //         itemBox.Status = itemBox.ItemBox_StatusFalling;
            //     }
            // }
            // this.SpawnLostRings(32, this.PlaneIndex);

            this.Rings = 0;
            this.SpawnLostCombineRings(32, this.PlaneIndex);
        }

        if (this.Status != this.Player_StatusHurt) {
            var invincibilityFrames = this.InvincibilityTimer;
            if (invincibilityFrames > 0) {
                invincibilityFrames--;
                this.InvincibilityTimer = invincibilityFrames;
                this.Visible = (invincibilityFrames & 4) == 0;
            }
        }

        if (this.Character == Character_RAY && this.Status != this.Player_StatusRay_Flying && !this.IsGhost) {
            // Stop playing sound
        }
        var mightyTimer = this.Unk_0x234;
        if (mightyTimer > 0)
            this.Unk_0x234 = mightyTimer - 1;

        if (this.Character == Character_TAILS && this.Status != this.Player_StatusTails_Flying && this.RayGlideSpeedStore) {
            this.RayGlideSpeedStore = 0;
        }

        // Is being crushed?
        if (this.HorizontalCollisionFlag == 3 || this.VerticalCollisionFlag == 3)
            this.KillFlag = 1;

        this.HorizontalCollisionFlag = 0;
        this.VerticalCollisionFlag = 0;
        if (this.MoveLayer_OffsetX != 0.0) {
            if (this.MoveLayer_Index == -1) {
                this.MoveLayer_Index = Scene.GetLayerIndex("Move");
            }
            if (this.MoveLayer_Index != -1) {
                Scene.SetLayerOffsetPosition(this.MoveLayer_Index, this.MoveLayer_OffsetX, this.MoveLayer_OffsetY);
            }
        }
        else {
            if (this.MoveLayer_Index == -1) {
                this.MoveLayer_Index = Scene.GetLayerIndex("Move");
            }
            else {
                Scene.SetLayerOffsetPosition(this.MoveLayer_Index, 0.0, this.Y);
            }
        }

        if (this.WentOffscreen)
            this.Status = this.Player_StatusStartRespawn;
        if (this.IsTransforming)
            this.Status = this.Player_StatusTransforming;

        // Run main code
        this.Status();

        // if (true) { // If not dead
            this.GroundSensorMask = 0;
            // this.IsUpsideDown = false;
            // if (true) {
                this.UpdateHitbox(1);
                // this.GetHitboxFromSprite(this.Sprite, this.CurrentAnimation, this.CurrentFrame, 1);
                this.OnGroundCopy = this.Ground;
                this.Entity_ApplyPhysics();
            // }
            // else {
            //
            // }

            this.MoveLayer_OffsetX = 0.0;
            if (this.Ground && this.AngleMode == 0)
                this.VerticalCollisionFlag |= 1;
        // }

        // this.HitboxW = this.HitboxHalfW * 2.0;
        // this.HitboxH = this.HitboxHalfH * 2.0;
        if (global.TimerActive)
            this.TimerFrames++;
    }
    event UpdateLate() {
        if (this.SuperForm == SuperState_Transforming && this.Status != this.Player_StatusTransforming)
            this.Player_HandleSuperForm(0x7F);

        if (this.Status == this.Player_StatusHangingFromTails) {
            this.HangingFromTailsX = Math.Floor(this.X);
            this.HangingFromTailsY = Math.Floor(this.Y);
        }

        if (this.KillFlag) {
            this.MaxGlideSpeed = 0.0;
            // TODO:
            if (this.IsSubPlayer || global.GameMode == GameModes_Competition || global.GameMode == GameModes_Encore) {
                if (this.Invincibility > 1)
                    this.Invincibility = 1;
                if (this.SpeedShoesTimer > 1)
                    this.SpeedShoesTimer = 1;
            }
            else {
                this.Invincibility = 0;
                this.SpeedShoesTimer = 0;
            }
            // if (this.GravityRate < 0.0)
            //     this.FlipFlag |= 2;
            // else
            //     this.FlipFlag &= 1;

            this.Visible = true;
            this.Ground = false;
            this.GroundSpeed = 0.0;
            this.XSpeed = 0.0;
            this.LateUpdateGroundStatus = null;
            this.LateUpdateAirStatus = null;
            this.Interactable = false;
            this.UseGroundSpeed = false;
            // if (global.GameMode != GameModes_Competition)
            //     this.UpdatePriorityType = 1;
            this.Shield = ShieldType_NONE;
            this.HorizontalCollisionFlag = 0;
            this.VerticalCollisionFlag = 0;
            this.Underwater = false;
            this.Player_ResetSpeeds();

            this.ShieldObject.Active = false;

            switch (this.KillFlag) {
                case 1:
                    Sound.Play(this.SFX_Hurt);

                    this.KillFlag = 0;
                    this.YSpeed = -6.5;
                    this.Status = this.Player_StatusDead;
                    this.Priority = DrawGroup_AboveTiles;
                    if (this.IsSubPlayer)
                        break;

                    if (global.GameMode == GameModes_Encore)
                        break;
                    else if (global.GameMode == GameModes_Competition)
                        break;
                    break;
                case 3:
                    this.KillFlag = 0;
                    this.GravityRate = 0.0625;
                    this.YSpeed = 0.0;
                    Sound.Play(this.SFX_Drown);
                    this.Status = this.Player_StatusDrown;

                    if (this.IsSubPlayer)
                        break;
                    if (global.GameMode == GameModes_Encore)
                        break;
                    else if (global.GameMode == GameModes_Competition)
                        break;
                    Music.Clear();
                    break;
            }

            this.CameraLockTimer = 1000000;
            if (this.CameraPtr)
                this.CameraPtr.Status = null;
        }

        if (this.Ground) {
            if (this.LateUpdateGroundStatus) {
                this.Status = this.LateUpdateGroundStatus;
                this.LateUpdateGroundStatus = null;
                //
                this.EnemyCombo = 0;
            }

            var camera = this.CameraPtr;
            if (camera) {
                if (this.CurrentAnimation == 10)
                    camera.Camera_Unk_0x9C = this.RollHitboxDelta;
                else
                    camera.Camera_Unk_0x9C = 0.0;
            }
        }
        else if (this.LateUpdateAirStatus) {
            this.Status = this.LateUpdateAirStatus;
            this.LateUpdateAirStatus = null;
        }

        // Do Tails Rotation Updating here if we have tailsprite
        var tailObject = this.TailObject;
        if (this.Character == Character_TAILS && tailObject) {
            this.ShowingTailSprite = true;
            switch (this.CurrentAnimation) {
                case 0:
                case 1:
                case 3:
                case 4:
                    // 0
                    tailObject.SetAnimation(0, 0);
                    this.TailFlip = this.Flip;
                    this.TailRotation = this.Rotation;
                    break;
                case 10:
                    // 1
                    tailObject.SetAnimation(1, 0);
                    if (this.Ground) {
                        this.TailFlip = this.GroundSpeed <= 0.0;
                        this.TailRotation = Math.Atan(this.XSpeed, this.YSpeed);
                        if (this.TailFlip)
                            this.TailRotation -= Math_PI;
                    }
                    else {
                        this.TailFlip = this.Flip;
                        this.TailRotation = Math.Atan(this.XSpeed, this.YSpeed);
                        if (this.Flip)
                            this.TailRotation -= Math_PI;
                    }
                    break;
                case 15:
                    // 2
                    tailObject.SetAnimation(2, 0);
                    this.TailFlip = this.Flip;
                    break;
                case 13:
                case 17:
                case 28:
                    // 3
                    tailObject.SetAnimation(3, 0);
                    this.TailFlip = this.Flip;
                    this.TailRotation = this.Rotation;
                    break;
                case 29:
                    // 4
                    tailObject.SetAnimation(4, 0);
                    this.TailFlip = this.Flip;
                    break;
                case 37:
                    // 5
                    tailObject.SetAnimation(5, 0);
                    this.TailFlip = this.Flip;
                    this.TailRotation = this.Rotation;
                    if (this.Flip)
                        this.TailRotation += Math_PI_DOUBLE / 16.0;
                    else
                        this.TailRotation -= Math_PI_DOUBLE / 16.0;
                    break;
                default:
                    this.ShowingTailSprite = false;
                    break;
            }
            tailObject.Animate();
        }

        // Custom: To fix bug if Knuckles' climb is interrupted
        if (this.Status != this.Player_StatusKnuckles_GettingUp)
            this.AutoAnimate = true;
        if (this.Status != this.Player_StatusRay_Flying) {
            Sound.Stop(this.SFX_RayDive);
            Sound.Stop(this.SFX_RaySwoop);
        }
    }

    // Render functions
    event AdjustRotationFlags(rot) {
        if (this.Status == this.Player_Status_Cylinder_OuterVertical ||
            this.Status == this.Player_Status_Cylinder_OuterHorizontal ||
            this.Status == this.Player_Status_Cylinder_OuterHorizontal_Rolling ||
            this.Status == this.Player_Status_Cylinder_MeshTubeExitSide)
            return rot;

        switch (this.CurrentAnimation) {
            // Half Engine Rotation (0 or 180 degree)
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 15:
            case 17:
                rot = this.RadiansToHex(rot);
                rot = (rot + 0x40) & 0x80;
                rot = this.HexToRadians(rot);
                break;
            // Full Engine Rotation (full range of rotation)
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 37:
            case 43:
                break;
            // Eighth Engine Rotation
            case 36:
                rot = this.RadiansToHex(rot);
                rot = (rot + 0x10) & 0xE0;
                rot = this.HexToRadians(rot);
                break;
            // No Rotation
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 16:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
                rot = 0.0;
                break;
        }

        return rot;
    }
    event Render() {
        // CUSTOM: All of this rendering code is custom
        if (this.Visible) {
            var drawPlayer = (this.InvulnTimer % 6) < 3;
            var rot = this.Rotation;
            var scale = 1.0;
            var x = Math.Floor(this.X);
            var y = Math.Floor(this.Y);

            rot = this.AdjustRotationFlags(rot);

            if (drawPlayer) {
                // Draw tail sprites
                if (this.Character == Character_TAILS && this.ShowingTailSprite && !this.KillFlag) {
                    var tails = this.TailObject;

                    Draw.Sprite(tails.Sprite, tails.CurrentAnimation, tails.CurrentFrame, x, y, this.TailFlip, false, scale, scale, this.TailRotation);
                }

                // Draw player sprite
                Draw.Sprite(this.Sprite, this.CurrentAnimation, this.CurrentFrame, x, y, this.Flip, this.FlipFlag & 2, scale, scale, rot);
            }

            // Draw.SetBlendColor(1.0, 1.0, 1.0, 0.85);
            // Draw.Rectangle(
            //     this.HitboxOffX - this.HitboxW * 0.5,
            //     this.HitboxOffY - this.HitboxH * 0.5,
            //     this.HitboxW, this.HitboxH);

            // Draw.SetBlendColor(0.0, 1.0, 1.0, 1.0);
            // if (this.Status == this.Player_StatusStanding)
            //     Draw.Rectangle(0.0, 0.0, 32.0, 10.0);

            // Draw spindash dust
            if (this.Status == this.Player_StatusSpinDash && !this.KillFlag)
                Draw.Sprite(this.DashDustSprite, 1, this.DashDustTimer, x, y + this.HitboxHalfH, this.Flip, false, scale, scale, 0.0);
        }
    }

    event GetAngleMode(v) {
        var angleMode;
        if ((v + 0x20) & 0x80) {
            angleMode = v;
            if (angleMode & 0x80) { // if negative
                angleMode--;
            }
            angleMode += 0x20;
        }
        else {
            angleMode = v;
            if (angleMode & 0x80) { // if negative
                angleMode++;
            }
            angleMode += 0x1F;
        }
        angleMode &= 0xC0;
        return angleMode;
    }
    event RadiansToHex(rad) {
        return rad * 128.0 / Math_PI;
    }
    event HexToRadians(rad) {
        return rad * Math_PI / 128.0;
    }
}
